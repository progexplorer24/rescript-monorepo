// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Caml_array from "rescript/lib/es6/caml_array.js";
import * as Cypress$RescriptMonorepo from "../../src/bindings/Cypress.mjs";

Cypress$RescriptMonorepo.context("Assertions", (function (param) {
        Cypress$RescriptMonorepo.beforeEach(function (param) {
              cy.visit("https://example.cypress.io/commands/assertions", undefined);
              
            });
        Cypress$RescriptMonorepo.describe("Implicit Assertions", (function (param) {
                Cypress$RescriptMonorepo.it(".should() - make an assertion about the current subject", (function (param) {
                        Cypress$RescriptMonorepo.shouldMatchRe(Cypress$RescriptMonorepo.shouldMatchP(Cypress$RescriptMonorepo.shouldHaveHtmlP(Cypress$RescriptMonorepo.shouldContainP(Cypress$RescriptMonorepo.shouldHaveTextP(Cypress$RescriptMonorepo.shouldHaveClassP(cy.get(".assertion-table", undefined).find("tbody tr:last", Cypress$RescriptMonorepo.FindOptions.make(undefined, undefined, undefined, undefined)), "success").find("td", undefined).first(undefined), "Column content"), "Column content"), "Column content"), "td").invoke("text"), /column content/i);
                        return Cypress$RescriptMonorepo.shouldBeVisible(cy.get(".assertion-table", undefined).find("tbody tr:last", undefined).contains("td", /column content/i, undefined));
                      }));
                return Cypress$RescriptMonorepo.it(".and() - chain multiple assertions together", (function (param) {
                              return Cypress$RescriptMonorepo.andInclude(Cypress$RescriptMonorepo.andHaveAttrP(Cypress$RescriptMonorepo.shouldHaveClassP(cy.get(".assertions-link", undefined), "active"), "href"), "cypress.io");
                            }));
              }));
        return Cypress$RescriptMonorepo.describe("Explicit Assertions", (function (param) {
                      Cypress$RescriptMonorepo.it("expect - make an assertion about a specified subject", (function (param) {
                              Cypress$RescriptMonorepo.expect(true).equal(true);
                              Cypress$RescriptMonorepo.expect(false).not.equal(true);
                              var o = {
                                foo: "bar"
                              };
                              Cypress$RescriptMonorepo.expect(o).equal(o);
                              Cypress$RescriptMonorepo.expect(o).to.deep.equal({
                                    foo: "bar"
                                  });
                              Cypress$RescriptMonorepo.expect("FooBar").match(/bar$/i);
                              
                            }));
                      Cypress$RescriptMonorepo.it("pass your own callback function to should()", (function (param) {
                              cy.get(".assertions-p", undefined).find("p", undefined).should(function (p) {
                                    var paragraphsRaw = p.get();
                                    var paragraphs = paragraphsRaw.map(function (element) {
                                          return element.textContent;
                                        });
                                    Cypress$RescriptMonorepo.expectWithDescription(p, "has 3 paragraphs").to.have.length(3);
                                    Cypress$RescriptMonorepo.expectWithDescription(paragraphs, "has expected text in each paragraph").to.deep.equal([
                                          "Some text from first p",
                                          "More text from second p",
                                          "And even more text from third p"
                                        ]);
                                    
                                  });
                              
                            }));
                      Cypress$RescriptMonorepo.it("finds element by class name regex", (function (param) {
                              cy.get(".docs-header", undefined).find("div", undefined).should(function (divRaw) {
                                      var div = divRaw.get();
                                      Cypress$RescriptMonorepo.expect(div).to.have.length(1);
                                      var className = Caml_array.get(div, 0).className;
                                      Cypress$RescriptMonorepo.expect(className).match(/heading-/);
                                      
                                    }).then(function (div) {
                                    Cypress$RescriptMonorepo.expectWithDescription(div, "text content").to.have.text("Introduction");
                                    
                                  });
                              
                            }));
                      Cypress$RescriptMonorepo.it("matches unknown text between two elements", (function (param) {
                              var text = {
                                contents: ""
                              };
                              var normalizeText = function (s) {
                                return s.replace(/\s/g, "").toLowerCase();
                              };
                              cy.get(".two-elements", undefined).find(".first", undefined).then(function (firstRaw) {
                                    var first = firstRaw.get();
                                    console.log(first);
                                    text.contents = normalizeText(Caml_array.get(first, 0).textContent);
                                    
                                  });
                              cy.get(".two-elements", undefined).find(".second", undefined).should(function (divRaw) {
                                    var div = divRaw.get();
                                    var secondText = normalizeText(Caml_array.get(div, 0).textContent);
                                    Cypress$RescriptMonorepo.expectWithDescription(secondText, "second text").equal(text.contents);
                                    
                                  });
                              
                            }));
                      Cypress$RescriptMonorepo.it("includes all chai examples", (function (param) {
                              Cypress$RescriptMonorepo.expect({
                                      a: 1
                                    }).to.deep.equal({
                                    a: 1
                                  });
                              Cypress$RescriptMonorepo.expect({
                                      a: 1
                                    }).not.equal({
                                    a: 1
                                  });
                              Cypress$RescriptMonorepo.expect([{
                                        a: 1
                                      }]).to.deep.include({
                                    a: 1
                                  });
                              Cypress$RescriptMonorepo.expect([{
                                        a: 1
                                      }]).not.to.include({
                                    a: 1
                                  });
                              Cypress$RescriptMonorepo.expect({
                                      x: {
                                        a: 1
                                      }
                                    }).to.deep.include({
                                    x: {
                                      a: 1
                                    }
                                  });
                              Cypress$RescriptMonorepo.expect({
                                      x: {
                                        a: 1
                                      }
                                    }).not.to.include({
                                    x: {
                                      a: 1
                                    }
                                  });
                              Cypress$RescriptMonorepo.expect([{
                                        a: 1
                                      }]).to.have.deep.members([{
                                      a: 1
                                    }]);
                              Cypress$RescriptMonorepo.expect([{
                                        a: 1
                                      }]).not.to.have.members([{
                                      a: 1
                                    }]);
                              Cypress$RescriptMonorepo.expect([
                                      1,
                                      2,
                                      3
                                    ]).to.include(2);
                              Cypress$RescriptMonorepo.expect("foobar").to.include("foo");
                              Cypress$RescriptMonorepo.expect({
                                      a: 1,
                                      b: 2,
                                      c: 3
                                    }).to.include({
                                    a: 1,
                                    b: 2
                                  });
                              Cypress$RescriptMonorepo.expect([]).to.deep.equal([]);
                              
                            }));
                      return Cypress$RescriptMonorepo.it("retries the should callback until assertions pass", (function (param) {
                                    cy.get("#random-number", undefined).should(function (divRaw) {
                                          var div = divRaw.get();
                                          var n = Belt_Int.fromString(Caml_array.get(div, 0).textContent);
                                          Cypress$RescriptMonorepo.expect(n).to.be.gte(1).to.be.lte(10);
                                          
                                        });
                                    
                                  }));
                    }));
      }));

export {
  
}
/*  Not a pure module */
