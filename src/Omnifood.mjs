// Generated by ReScript, PLEASE EDIT WITH CARE

import * as CssJs from "bs-css-emotion/src/CssJs.mjs";
import * as React from "react";
import Head from "next/head";
import * as Css_Js_Core from "bs-css/src/Css_Js_Core.mjs";
import * as Utils$RescriptMonorepo from "./utils/Utils.mjs";
import * as Tailwind$RescriptMonorepo from "./styles/tailwind/Tailwind.mjs";

var mainOrange = "e67e22";

var smallGlobal = CssJs.style([CssJs.media("screen and (max-width: 767px)", [
            CssJs.overflowX("hidden"),
            CssJs.fontSize({
                  NAME: "px",
                  VAL: 15
                })
          ])]);

var mediumBreakpointGlobal = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.fontSize({
                  NAME: "px",
                  VAL: 18
                })])]);

var globalStyles = CssJs.merge([
      CssJs.style([
            CssJs.backgroundColor(CssJs.hex("fff")),
            CssJs.color(CssJs.hex("555")),
            CssJs.fontSize(CssJs.px(20)),
            CssJs.fontWeight({
                  NAME: "num",
                  VAL: 300
                }),
            CssJs.fontFamily({
                  NAME: "custom",
                  VAL: "Lato"
                })
          ]),
      mediumBreakpointGlobal,
      smallGlobal
    ]);

var smallRow = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.padding2({
                  NAME: "px",
                  VAL: 0
                }, {
                  NAME: "percent",
                  VAL: 4
                })])]);

var largeBreakpointRow = CssJs.style([CssJs.media("screen and (max-width: 1200px)", [CssJs.padding2({
                  NAME: "px",
                  VAL: 0
                }, {
                  NAME: "percent",
                  VAL: 2
                })])]);

var row = CssJs.merge([
      CssJs.style([
            CssJs.maxWidth(CssJs.px(1140)),
            CssJs.margin2("zero", "auto")
          ]),
      largeBreakpointRow,
      smallRow
    ]);

var headerStyles = CssJs.style([
      CssJs.backgrounds([
            CssJs.linearGradient(CssJs.deg(0), [
                  [
                    CssJs.zero,
                    {
                      NAME: "rgba",
                      VAL: [
                        0,
                        0,
                        0,
                        {
                          NAME: "percent",
                          VAL: 70
                        }
                      ]
                    }
                  ],
                  [
                    {
                      NAME: "percent",
                      VAL: 100
                    },
                    {
                      NAME: "rgba",
                      VAL: [
                        0,
                        0,
                        0,
                        {
                          NAME: "percent",
                          VAL: 70
                        }
                      ]
                    }
                  ]
                ]),
            CssJs.url("/omnifood/hero.jpg")
          ]),
      CssJs.height({
            NAME: "vh",
            VAL: 100
          }),
      CssJs.backgroundSize("cover"),
      CssJs.backgroundPosition("center"),
      CssJs.backgroundAttachment("fixed")
    ]);

var smallTextBox = CssJs.style([CssJs.media("screen and (max-width: 767px)", [
            CssJs.width({
                  NAME: "percent",
                  VAL: 100
                }),
            CssJs.padding2({
                  NAME: "px",
                  VAL: 0
                }, {
                  NAME: "percent",
                  VAL: 4
                })
          ])]);

var largeBreakpointTextBox = CssJs.style([CssJs.media("screen and (max-width: 1200px)", [
            CssJs.width({
                  NAME: "percent",
                  VAL: 100
                }),
            CssJs.padding2({
                  NAME: "px",
                  VAL: 0
                }, {
                  NAME: "percent",
                  VAL: 2
                })
          ])]);

var textBox = CssJs.merge([
      CssJs.style([
            CssJs.position("absolute"),
            CssJs.width(CssJs.px(1140)),
            CssJs.top({
                  NAME: "percent",
                  VAL: 50
                }),
            CssJs.left({
                  NAME: "percent",
                  VAL: 50
                }),
            CssJs.transform({
                  NAME: "translate",
                  VAL: [
                    {
                      NAME: "percent",
                      VAL: -50
                    },
                    {
                      NAME: "percent",
                      VAL: -50
                    }
                  ]
                })
          ]),
      largeBreakpointTextBox,
      smallTextBox
    ]);

var headingStyles = CssJs.style([
      CssJs.fontWeight({
            NAME: "num",
            VAL: 300
          }),
      CssJs.textTransform("uppercase")
    ]);

var smallH1 = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 180
                })])]);

var h1 = CssJs.merge([
      CssJs.style([
            CssJs.margin("zero"),
            CssJs.color(CssJs.hex("fff")),
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 240
                }),
            CssJs.marginBottom(CssJs.px(20)),
            CssJs.letterSpacing({
                  NAME: "px",
                  VAL: 1
                })
          ]),
      smallH1
    ]);

var btn = CssJs.style([
      CssJs.display("inlineBlock"),
      CssJs.padding2(CssJs.px(10), CssJs.px(30)),
      CssJs.fontWeight({
            NAME: "num",
            VAL: 300
          }),
      CssJs.borderRadius({
            NAME: "px",
            VAL: 200
          }),
      CssJs.transition(200, undefined, undefined, "background-color, color, border")
    ]);

var btnHover = CssJs.style([CssJs.hover([CssJs.backgroundColor(CssJs.hex("cf6d17"))])]);

var hoverStyles2 = CssJs.style([CssJs.hover([
            CssJs.color(CssJs.hex("fff")),
            CssJs.border(CssJs.px(1), CssJs.solid, {
                  NAME: "hex",
                  VAL: "cf6d17"
                })
          ])]);

var btnFull = CssJs.merge([
      btn,
      btnHover,
      CssJs.style([
            CssJs.backgroundColor(CssJs.hex("e67e22")),
            CssJs.color({
                  NAME: "hex",
                  VAL: "fff"
                }),
            CssJs.marginRight(CssJs.px(15))
          ])
    ]);

var btnGhost = CssJs.merge([
      btn,
      btnHover,
      hoverStyles2,
      CssJs.style([
            CssJs.border(CssJs.px(1), CssJs.solid, {
                  NAME: "hex",
                  VAL: "e67e22"
                }),
            CssJs.color({
                  NAME: "hex",
                  VAL: "e67e22"
                })
          ])
    ]);

var logo = CssJs.style([
      CssJs.height(CssJs.px(50)),
      CssJs.width("auto"),
      CssJs.$$float("left"),
      CssJs.marginTop(CssJs.px(5)),
      CssJs.marginBottom(CssJs.px(5))
    ]);

var stickyNav = CssJs.style([
      CssJs.position("fixed"),
      CssJs.top({
            NAME: "px",
            VAL: 0
          }),
      CssJs.left({
            NAME: "px",
            VAL: 0
          }),
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.backgroundColor({
            NAME: "rgba",
            VAL: [
              255,
              255,
              255,
              {
                NAME: "percent",
                VAL: 98
              }
            ]
          }),
      CssJs.boxShadow(Css_Js_Core.Shadow.box({
                NAME: "px",
                VAL: 0
              }, {
                NAME: "px",
                VAL: 2
              }, {
                NAME: "px",
                VAL: 2
              }, undefined, undefined, {
                NAME: "hex",
                VAL: "efefef"
              })),
      CssJs.zIndex(9999)
    ]);

var mainNavSticky = CssJs.style([CssJs.color({
            NAME: "hex",
            VAL: "555"
          })]);

var mainNav = CssJs.merge([
      CssJs.style([
            CssJs.$$float("right"),
            CssJs.marginTop(CssJs.px(18))
          ]),
      mainNavSticky
    ]);

var liNav = CssJs.style([
      CssJs.display("inlineBlock"),
      CssJs.marginLeft({
            NAME: "px",
            VAL: 40
          })
    ]);

var linkBase = CssJs.style([
      CssJs.color({
            NAME: "hex",
            VAL: "555"
          }),
      CssJs.textTransform("uppercase"),
      CssJs.fontSize({
            NAME: "percent",
            VAL: 90
          }),
      CssJs.borderBottom({
            NAME: "px",
            VAL: 2
          }, "solid", "transparent"),
      CssJs.transition(200, undefined, undefined, "border-bottom"),
      CssJs.padding2(CssJs.px(16), "zero")
    ]);

var linkHover = CssJs.style([CssJs.hover([CssJs.borderBottom({
                  NAME: "px",
                  VAL: 2
                }, "solid", {
                  NAME: "hex",
                  VAL: mainOrange
                })])]);

var link = CssJs.merge([
      linkBase,
      linkHover
    ]);

var h2After = CssJs.style([CssJs.after([
            CssJs.display("block"),
            CssJs.height({
                  NAME: "px",
                  VAL: 2
                }),
            CssJs.backgroundColor({
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.contentRule({
                  NAME: "text",
                  VAL: " "
                }),
            CssJs.width({
                  NAME: "px",
                  VAL: 100
                }),
            CssJs.margin2({
                  NAME: "px",
                  VAL: 0
                }, "auto"),
            CssJs.marginTop({
                  NAME: "px",
                  VAL: 30
                })
          ])]);

var h2Small = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 150
                })])]);

var h2 = CssJs.merge([
      headingStyles,
      CssJs.style([
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 180
                }),
            CssJs.wordSpacing(CssJs.px(2)),
            CssJs.textAlign("center"),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 30
                }),
            CssJs.letterSpacing({
                  NAME: "px",
                  VAL: 1
                })
          ]),
      h2After,
      h2Small
    ]);

var h3 = CssJs.merge([
      headingStyles,
      CssJs.style([
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 110
                }),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 15
                })
          ])
    ]);

var smallP = CssJs.style([CssJs.media("screen and (max-width: 767px)", [
            CssJs.width({
                  NAME: "percent",
                  VAL: 100
                }),
            CssJs.marginLeft({
                  NAME: "px",
                  VAL: 0
                })
          ])]);

var mediumP = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [
            CssJs.width({
                  NAME: "percent",
                  VAL: 80
                }),
            CssJs.marginLeft({
                  NAME: "percent",
                  VAL: 10
                })
          ])]);

var p = CssJs.merge([
      CssJs.style([
            CssJs.lineHeight({
                  NAME: "percent",
                  VAL: 140
                }),
            CssJs.width({
                  NAME: "percent",
                  VAL: 70
                }),
            CssJs.marginLeft({
                  NAME: "percent",
                  VAL: 15
                }),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 40
                })
          ]),
      mediumP,
      smallP
    ]);

var featuresParagraph = CssJs.style([
      CssJs.fontSize({
            NAME: "percent",
            VAL: 90
          }),
      CssJs.lineHeight({
            NAME: "percent",
            VAL: 140
          })
    ]);

var box = CssJs.style([CssJs.padding({
            NAME: "percent",
            VAL: 1
          })]);

var bigIcons = CssJs.merge([
      CssJs.style([
            CssJs.color({
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 10
                })
          ]),
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.w(16),
            Tailwind$RescriptMonorepo.h(16),
            Tailwind$RescriptMonorepo.block,
            Tailwind$RescriptMonorepo.fillCurrent
          ])
    ]);

var clearfix = CssJs.style([CssJs.after([
            CssJs.contentRule({
                  NAME: "text",
                  VAL: "."
                }),
            CssJs.clear("both"),
            CssJs.display("block"),
            CssJs.height({
                  NAME: "px",
                  VAL: 0
                }),
            CssJs.visibility("hidden")
          ])]);

var mealsShowcase = CssJs.merge([
      CssJs.style([CssJs.width({
                  NAME: "percent",
                  VAL: 100
                })]),
      clearfix
    ]);

var mealsLi = CssJs.style([
      CssJs.display("block"),
      CssJs.$$float("left"),
      CssJs.width({
            NAME: "percent",
            VAL: 25
          })
    ]);

var mealFigure = CssJs.style([
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.margin({
            NAME: "px",
            VAL: 0
          }),
      CssJs.overflow("hidden"),
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "000000"
          })
    ]);

var mealImgHover = CssJs.style([CssJs.hover([
            CssJs.transform({
                  NAME: "scale",
                  VAL: [
                    1,
                    1
                  ]
                }),
            CssJs.opacity(1)
          ])]);

var mealImg = CssJs.merge([
      CssJs.style([
            CssJs.width({
                  NAME: "percent",
                  VAL: 100
                }),
            CssJs.height("auto"),
            CssJs.transform({
                  NAME: "scale",
                  VAL: [
                    1.15,
                    1.15
                  ]
                }),
            CssJs.transitions([
                  Css_Js_Core.Transition.shorthand(500, undefined, undefined, "transform"),
                  Css_Js_Core.Transition.shorthand(500, undefined, undefined, "opacity")
                ]),
            CssJs.opacity(0.7)
          ]),
      mealImgHover
    ]);

var smallStepsBox = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.marginTop({
                  NAME: "px",
                  VAL: 10
                })])]);

var mediumStepsBox = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.marginTop({
                  NAME: "px",
                  VAL: 10
                })])]);

var stepsBox = CssJs.merge([
      CssJs.style([CssJs.marginTop({
                  NAME: "px",
                  VAL: 30
                })]),
      mediumStepsBox,
      smallStepsBox
    ]);

var smallLeftSection = CssJs.style([CssJs.media("screen and (max-width: 767px)", [
            CssJs.textAlign("center"),
            CssJs.paddingRight({
                  NAME: "px",
                  VAL: 0
                })
          ])]);

var leftSection = CssJs.merge([
      stepsBox,
      CssJs.style([
            CssJs.textAlign("right"),
            CssJs.paddingRight({
                  NAME: "percent",
                  VAL: 10
                })
          ]),
      smallLeftSection
    ]);

var rightSection = CssJs.merge([
      stepsBox,
      CssJs.style([
            CssJs.paddingLeft({
                  NAME: "percent",
                  VAL: 3
                }),
            CssJs.marginTop({
                  NAME: "px",
                  VAL: 70
                })
          ])
    ]);

var smallAppScreen = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.width({
                  NAME: "percent",
                  VAL: 40
                })])]);

var mediumAppScreen = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.width({
                  NAME: "percent",
                  VAL: 50
                })])]);

var appScreen = CssJs.merge([
      CssJs.style([
            CssJs.width({
                  NAME: "percent",
                  VAL: 40
                }),
            CssJs.display("inlineBlock")
          ]),
      mediumAppScreen,
      smallAppScreen
    ]);

var smallWorkStop = CssJs.style([CssJs.media("screen and (max-width: 767px)", [CssJs.marginBottom({
                  NAME: "px",
                  VAL: 20
                })])]);

var mediumWorkStop = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.marginBottom({
                  NAME: "px",
                  VAL: 40
                })])]);

var worksStop = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.flex,
            Tailwind$RescriptMonorepo.itemsCenter,
            Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.itemsStart])
          ]),
      CssJs.style([
            CssJs.overflow("auto"),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 50
                })
          ]),
      mediumWorkStop,
      smallWorkStop
    ]);

var lastWorkStop = CssJs.merge([
      worksStop,
      CssJs.style([CssJs.marginBottom({
                  NAME: "px",
                  VAL: 80
                })])
    ]);

var smallWorkStopNumber = CssJs.style([CssJs.media("screen and (max-width: 767px)", [
            CssJs.height({
                  NAME: "px",
                  VAL: 40
                }),
            CssJs.width({
                  NAME: "px",
                  VAL: 40
                }),
            CssJs.marginRight({
                  NAME: "px",
                  VAL: 15
                }),
            CssJs.padding({
                  NAME: "px",
                  VAL: 4
                }),
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 120
                })
          ])]);

var workStopNumber = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.flexShrink0]),
      CssJs.style([
            CssJs.color({
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.border(CssJs.px(2), "solid", {
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.display("inlineBlock"),
            CssJs.borderRadius({
                  NAME: "percent",
                  VAL: 50
                }),
            CssJs.width({
                  NAME: "px",
                  VAL: 50
                }),
            CssJs.height({
                  NAME: "px",
                  VAL: 50
                }),
            CssJs.textAlign("center"),
            CssJs.$$float("left"),
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 150
                }),
            CssJs.marginRight({
                  NAME: "px",
                  VAL: 25
                }),
            CssJs.padding({
                  NAME: "px",
                  VAL: 5
                })
          ]),
      smallWorkStopNumber
    ]);

var btnAppImage = CssJs.style([
      CssJs.height({
            NAME: "px",
            VAL: 50
          }),
      CssJs.width("auto"),
      CssJs.marginRight({
            NAME: "px",
            VAL: 10
          }),
      CssJs.display("inlineBlock")
    ]);

var xsSection = CssJs.style([CssJs.media("screen and (max-width: 480px)", [CssJs.padding2({
                  NAME: "px",
                  VAL: 25
                }, {
                  NAME: "px",
                  VAL: 0
                })])]);

var smallSection = CssJs.style([CssJs.padding2({
            NAME: "px",
            VAL: 30
          }, {
            NAME: "px",
            VAL: 0
          })]);

var mediumSection = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.padding2({
                  NAME: "px",
                  VAL: 60
                }, {
                  NAME: "px",
                  VAL: 0
                })])]);

var section = CssJs.merge([
      CssJs.style([CssJs.padding2(CssJs.px(80), CssJs.px(0))]),
      mediumSection,
      smallSection,
      xsSection
    ]);

var sectionSteps = CssJs.merge([
      section,
      CssJs.style([CssJs.backgroundColor({
                  NAME: "hex",
                  VAL: "f4f4f4"
                })])
    ]);

var boxImage = CssJs.style([
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.height("auto"),
      CssJs.marginBottom({
            NAME: "px",
            VAL: 15
          })
    ]);

var mediumCityFeature = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 90
                })])]);

var cityFeature = CssJs.merge([
      CssJs.style([CssJs.marginBottom({
                  NAME: "px",
                  VAL: 10
                })]),
      mediumCityFeature
    ]);

var fourColumns = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.grid,
            Tailwind$RescriptMonorepo.gridCols(1),
            Tailwind$RescriptMonorepo.gap(6),
            Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.gridCols(4)])
          ]),
      row
    ]);

var mediumIconSmall = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [
            CssJs.width({
                  NAME: "px",
                  VAL: 16
                }),
            CssJs.marginRight({
                  NAME: "px",
                  VAL: 5
                })
          ])]);

var iconSmall = CssJs.merge([
      CssJs.style([
            CssJs.display("inlineBlock"),
            CssJs.width({
                  NAME: "px",
                  VAL: 30
                }),
            CssJs.textAlign("center"),
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 120
                }),
            CssJs.color({
                  NAME: "hex",
                  VAL: mainOrange
                }),
            Css_Js_Core.SVG.fill("currentColor"),
            CssJs.lineHeight({
                  NAME: "percent",
                  VAL: 120
                }),
            CssJs.verticalAlign("middle"),
            CssJs.marginTop({
                  NAME: "px",
                  VAL: -6
                }),
            CssJs.marginRight({
                  NAME: "px",
                  VAL: 10
                })
          ]),
      mediumIconSmall
    ]);

var twitterHover = CssJs.style([CssJs.hover([
            CssJs.color({
                  NAME: "hex",
                  VAL: "555"
                }),
            CssJs.borderBottom({
                  NAME: "px",
                  VAL: 1
                }, "solid", "transparent")
          ])]);

var twitterLink = CssJs.merge([
      CssJs.style([
            CssJs.color({
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.borderBottom({
                  NAME: "px",
                  VAL: 1
                }, "solid", {
                  NAME: "hex",
                  VAL: mainOrange
                }),
            CssJs.paddingBottom({
                  NAME: "px",
                  VAL: 1
                }),
            CssJs.transition(200, undefined, undefined, "background-color"),
            CssJs.transition(200, undefined, undefined, "border")
          ]),
      twitterHover
    ]);

var threeColumns = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.grid,
            Tailwind$RescriptMonorepo.gridCols(1),
            Tailwind$RescriptMonorepo.minWBreakpoint(481, [
                  Tailwind$RescriptMonorepo.gridCols(3),
                  Tailwind$RescriptMonorepo.gap(6)
                ])
          ]),
      row
    ]);

var customerSection = CssJs.merge([
      section,
      CssJs.style([
            CssJs.backgrounds([
                  CssJs.linearGradient(CssJs.deg(0), [
                        [
                          CssJs.zero,
                          {
                            NAME: "rgba",
                            VAL: [
                              0,
                              0,
                              0,
                              {
                                NAME: "percent",
                                VAL: 80
                              }
                            ]
                          }
                        ],
                        [
                          {
                            NAME: "percent",
                            VAL: 100
                          },
                          {
                            NAME: "rgba",
                            VAL: [
                              0,
                              0,
                              0,
                              {
                                NAME: "percent",
                                VAL: 80
                              }
                            ]
                          }
                        ]
                      ]),
                  {
                    NAME: "url",
                    VAL: "/omnifood/back-customers.jpg"
                  }
                ]),
            CssJs.backgroundSize("cover"),
            CssJs.backgroundAttachment("fixed")
          ]),
      Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.textColor(undefined, "white")])
    ]);

var blockquoteBefore = CssJs.style([CssJs.before([
            CssJs.contentRule({
                  NAME: "text",
                  VAL: Utils$RescriptMonorepo.lsquo
                }),
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 500
                }),
            CssJs.display("block"),
            CssJs.position("absolute"),
            CssJs.top({
                  NAME: "px",
                  VAL: -5
                }),
            CssJs.left({
                  NAME: "px",
                  VAL: -5
                })
          ])]);

var blockquote = CssJs.merge([
      CssJs.style([
            CssJs.padding({
                  NAME: "percent",
                  VAL: 2
                }),
            CssJs.fontStyle("italic"),
            CssJs.lineHeight({
                  NAME: "percent",
                  VAL: 145
                }),
            CssJs.position("relative"),
            CssJs.marginTop({
                  NAME: "px",
                  VAL: 40
                })
          ]),
      blockquoteBefore
    ]);

var cite = CssJs.style([
      CssJs.fontSize({
            NAME: "percent",
            VAL: 90
          }),
      CssJs.marginTop({
            NAME: "px",
            VAL: 25
          }),
      CssJs.display("block")
    ]);

var customerImage = CssJs.style([
      CssJs.height({
            NAME: "px",
            VAL: 45
          }),
      CssJs.borderRadius({
            NAME: "percent",
            VAL: 50
          }),
      CssJs.marginRight({
            NAME: "px",
            VAL: 10
          }),
      CssJs.verticalAlign("middle"),
      CssJs.display("inlineBlock")
    ]);

var sectionPlans = CssJs.merge([
      section,
      CssJs.style([CssJs.backgroundColor({
                  NAME: "hex",
                  VAL: "f4f4f4"
                })])
    ]);

var mediumPlanBox = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [
            CssJs.width({
                  NAME: "percent",
                  VAL: 100
                }),
            CssJs.marginLeft({
                  NAME: "px",
                  VAL: 0
                })
          ])]);

var planBox = CssJs.merge([
      CssJs.style([
            CssJs.backgroundColor({
                  NAME: "hex",
                  VAL: "fff"
                }),
            CssJs.borderRadius({
                  NAME: "px",
                  VAL: 5
                }),
            CssJs.boxShadow(Css_Js_Core.Shadow.box(CssJs.px(0), CssJs.px(2), CssJs.px(2), undefined, undefined, {
                      NAME: "hex",
                      VAL: "efefef"
                    }))
          ]),
      mediumPlanBox
    ]);

var mediumPlanBoxDiv = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.padding({
                  NAME: "px",
                  VAL: 20
                })])]);

var planBoxDiv = CssJs.merge([
      CssJs.style([
            CssJs.padding({
                  NAME: "px",
                  VAL: 40
                }),
            CssJs.borderBottom({
                  NAME: "px",
                  VAL: 1
                }, "solid", {
                  NAME: "rgb",
                  VAL: [
                    243,
                    244,
                    246
                  ]
                })
          ]),
      mediumPlanBoxDiv
    ]);

var threeColumnsPricing = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.grid,
            Tailwind$RescriptMonorepo.gap(6),
            Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.gridCols(3)])
          ]),
      row
    ]);

var smPlanPrice = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 300
                })])]);

var mediumPlanPrice = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 250
                })])]);

var planPrice = CssJs.merge([
      CssJs.style([
            CssJs.fontSize({
                  NAME: "percent",
                  VAL: 300
                }),
            CssJs.marginBottom({
                  NAME: "px",
                  VAL: 10
                }),
            CssJs.fontWeight({
                  NAME: "num",
                  VAL: 100
                }),
            CssJs.color({
                  NAME: "hex",
                  VAL: mainOrange
                })
          ]),
      mediumPlanPrice,
      smPlanPrice
    ]);

var planPriceSpan = CssJs.style([
      CssJs.fontSize({
            NAME: "percent",
            VAL: 30
          }),
      CssJs.fontWeight({
            NAME: "num",
            VAL: 300
          })
    ]);

var smallPlanPriceMeal = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.fontSize({
                  NAME: "percent",
                  VAL: 100
                })])]);

var planPriceMeal = CssJs.merge([
      CssJs.style([CssJs.fontSize({
                  NAME: "percent",
                  VAL: 80
                })]),
      smallPlanPriceMeal
    ]);

var planBoxLi = CssJs.style([CssJs.padding2(CssJs.px(5), CssJs.px(0))]);

var buttonSection = CssJs.merge([
      planBoxDiv,
      CssJs.style([
            CssJs.textAlign("center"),
            CssJs.borderBottom({
                  NAME: "px",
                  VAL: 1
                }, "solid", "transparent")
          ])
    ]);

var priceSection = CssJs.merge([
      planBoxDiv,
      CssJs.style([
            CssJs.backgroundColor({
                  NAME: "hex",
                  VAL: "fcfcfc"
                }),
            CssJs.borderTopRightRadius({
                  NAME: "px",
                  VAL: 5
                }),
            CssJs.borderTopLeftRadius({
                  NAME: "px",
                  VAL: 5
                })
          ])
    ]);

var xsContactForm = CssJs.style([CssJs.media("screen and (max-width: 1023px)", [CssJs.width({
                  NAME: "percent",
                  VAL: 100
                })])]);

var mediumContactForm = CssJs.style([CssJs.width({
            NAME: "percent",
            VAL: 80
          })]);

var contactForm = CssJs.merge([
      CssJs.style([
            CssJs.width({
                  NAME: "percent",
                  VAL: 60
                }),
            CssJs.margin2({
                  NAME: "px",
                  VAL: 0
                }, "auto")
          ]),
      mediumContactForm,
      xsContactForm
    ]);

var inputStyles = CssJs.style([
      CssJs.width({
            NAME: "percent",
            VAL: 100
          }),
      CssJs.padding({
            NAME: "px",
            VAL: 7
          }),
      CssJs.borderRadius({
            NAME: "px",
            VAL: 3
          }),
      CssJs.border({
            NAME: "px",
            VAL: 1
          }, "solid", {
            NAME: "hex",
            VAL: "ccc"
          }),
      CssJs.margin2({
            NAME: "px",
            VAL: 5
          }, {
            NAME: "px",
            VAL: 0
          })
    ]);

var textareaStyles = CssJs.merge([
      inputStyles,
      CssJs.style([CssJs.height({
                  NAME: "percent",
                  VAL: 100
                })])
    ]);

var checkboxStyles = CssJs.style([CssJs.margin4({
            NAME: "px",
            VAL: 10
          }, {
            NAME: "px",
            VAL: 5
          }, {
            NAME: "px",
            VAL: 10
          }, {
            NAME: "px",
            VAL: 0
          })]);

var twoColumns = CssJs.merge([
      Tailwind$RescriptMonorepo.twStyle([
            Tailwind$RescriptMonorepo.grid,
            Tailwind$RescriptMonorepo.gridCols(2),
            Tailwind$RescriptMonorepo.gap(6)
          ]),
      row
    ]);

var footer = CssJs.style([
      CssJs.backgroundColor({
            NAME: "hex",
            VAL: "333"
          }),
      CssJs.padding2({
            NAME: "px",
            VAL: 20
          }, {
            NAME: "px",
            VAL: 0
          })
    ]);

var footerNav = CssJs.style([CssJs.$$float("left")]);

var socialLinks = CssJs.style([CssJs.$$float("right")]);

var footerLi = CssJs.style([
      CssJs.display("inlineBlock"),
      CssJs.marginRight({
            NAME: "px",
            VAL: 20
          })
    ]);

var lastLi = CssJs.style([
      CssJs.display("inlineBlock"),
      CssJs.marginRight({
            NAME: "px",
            VAL: 0
          })
    ]);

var linkHover$1 = CssJs.style([CssJs.hover([CssJs.color({
                  NAME: "hex",
                  VAL: "ddd"
                })])]);

var navLink = CssJs.merge([
      CssJs.style([
            CssJs.textDecoration("none"),
            CssJs.borderWidth({
                  NAME: "px",
                  VAL: 0
                }),
            CssJs.color({
                  NAME: "hex",
                  VAL: "AAA"
                })
          ]),
      linkHover$1
    ]);

var iconNav = CssJs.merge([
      iconSmall,
      CssJs.style([CssJs.color({
                  NAME: "hex",
                  VAL: "AAA"
                })]),
      linkHover$1
    ]);

var footerText = CssJs.style([
      CssJs.color({
            NAME: "hex",
            VAL: "AAA"
          }),
      CssJs.textAlign("center"),
      CssJs.paddingTop({
            NAME: "px",
            VAL: 25
          })
    ]);

function $$default(param) {
  return React.createElement("div", {
              className: globalStyles
            }, React.createElement(Head, {
                  children: null
                }, React.createElement("media", {
                      content: "width=device-width, initial-sacle=1.0",
                      name: "viewport"
                    }), React.createElement("title", undefined, Utils$RescriptMonorepo.str("Omnifood")), React.createElement("link", {
                      href: "https://fonts.gstatic.com",
                      rel: "preconnect"
                    }), React.createElement("link", {
                      href: "https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;1,300&display=swap",
                      rel: "stylesheet"
                    })), React.createElement("header", {
                  className: headerStyles
                }, React.createElement("nav", {
                      className: stickyNav
                    }, React.createElement("div", {
                          className: row
                        }, React.createElement("img", {
                              className: logo,
                              alt: "Omnifood logo",
                              src: "/omnifood/logo.png"
                            }), React.createElement("ul", {
                              className: mainNav
                            }, React.createElement("li", {
                                  className: liNav
                                }, React.createElement("a", {
                                      className: link,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Food delivery"))), React.createElement("li", {
                                  className: liNav
                                }, React.createElement("a", {
                                      className: link,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("How it works"))), React.createElement("li", {
                                  className: liNav
                                }, React.createElement("a", {
                                      className: link,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Our cities"))), React.createElement("li", {
                                  className: liNav
                                }, React.createElement("a", {
                                      className: link,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Sign up")))))), React.createElement("div", {
                      className: textBox
                    }, React.createElement("h1", {
                          className: h1
                        }, Utils$RescriptMonorepo.str("Goodbye junk food."), React.createElement("br", undefined), Utils$RescriptMonorepo.str("Hello super healthy meals.")), React.createElement("a", {
                          className: btnFull,
                          href: "#pricing"
                        }, Utils$RescriptMonorepo.str("I'm hungry")), React.createElement("a", {
                          className: btnGhost,
                          href: "#features"
                        }, Utils$RescriptMonorepo.str("Show me more")))), React.createElement("section", {
                  className: section,
                  id: "features"
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("Get food fast " + Utils$RescriptMonorepo.mdash + " not fast food.")), React.createElement("p", {
                          className: p
                        }, Utils$RescriptMonorepo.str("Hello, we're Omnifood, your new premium food delivery service. We know you're always busy. No time for cooking. So let us take care of that, we're really good at it, we promise!\n          ")), React.createElement("div", {
                          className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                      Tailwind$RescriptMonorepo.grid,
                                      Tailwind$RescriptMonorepo.mt(8),
                                      Tailwind$RescriptMonorepo.gap(4),
                                      Tailwind$RescriptMonorepo.gridCols(1),
                                      Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.gridCols(4)])
                                    ])])
                        }, React.createElement("div", {
                              className: box
                            }, React.createElement("svg", {
                                  className: bigIcons,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M256 256s-48-96-126-96c-54.12 0-98 43-98 96s43.88 96 98 96c37.51 0 71-22.41 94-48M256 256s48 96 126 96c54.12 0 98-43 98-96s-43.88-96-98-96c-37.51 0-71 22.41-94 48",
                                      fill: "none",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeMiterlimit: "10",
                                      strokeWidth: "32"
                                    })), React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("Up to 365 days/year")), React.createElement("p", {
                                  className: featuresParagraph
                                }, Utils$RescriptMonorepo.str("Never cook again! We really mean that. Our subscription plans include up to 365 days/year coverage. You can also choose to order more flexibly if that's your style."))), React.createElement("div", {
                              className: box
                            }, React.createElement("svg", {
                                  className: bigIcons,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M112.91 128A191.85 191.85 0 0064 254c-1.18 106.35 85.65 193.8 192 194 106.2.2 192-85.83 192-192 0-104.54-83.55-189.61-187.5-192a4.36 4.36 0 00-4.5 4.37V152",
                                      fill: "none",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeLinejoin: "round",
                                      strokeWidth: "32"
                                    }), React.createElement("path", {
                                      d: "M233.38 278.63l-79-113a8.13 8.13 0 0111.32-11.32l113 79a32.5 32.5 0 01-37.25 53.26 33.21 33.21 0 01-8.07-7.94z"
                                    })), React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("Ready in 20 minutes")), React.createElement("p", {
                                  className: featuresParagraph
                                }, Utils$RescriptMonorepo.str("You're only twenty minutes away from your delicious and super healthy meals delivered right to your home. We work with the best chefs in each town to ensure that you're 100% happy.\n            "))), React.createElement("div", {
                              className: box
                            }, React.createElement("svg", {
                                  className: bigIcons,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M352 128c-32.26-2.89-64 16-96 16s-63.75-19-96-16c-64 6-96 64-96 160 0 80 64 192 111.2 192s51.94-24 80.8-24 33.59 24 80.8 24S448 368 448 288c0-96-29-154-96-160z",
                                      fill: "none",
                                      stroke: "currentColor",
                                      strokeMiterlimit: "10",
                                      strokeWidth: "32"
                                    }), React.createElement("path", {
                                      d: "M323.92 83.14c-21 21-45.66 27-58.82 28.79a8 8 0 01-9.1-8.73 97.6 97.6 0 0128.61-59.33c22-22 46-26.9 58.72-27.85a8 8 0 018.67 8.92 98 98 0 01-28.08 58.2z"
                                    }), React.createElement("ellipse", {
                                      cx: "216",
                                      cy: "304",
                                      rx: "24",
                                      ry: "48"
                                    }), React.createElement("ellipse", {
                                      cx: "296",
                                      cy: "304",
                                      rx: "24",
                                      ry: "48"
                                    })), React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("100% organic")), React.createElement("p", {
                                  className: featuresParagraph
                                }, Utils$RescriptMonorepo.str("All our vegetables are fresh, organic and local. Animals are raised without added hormones or antibiotics. Good for your health, the environment, and it also tastes better!\n            "))), React.createElement("div", {
                              className: box
                            }, React.createElement("svg", {
                                  className: bigIcons,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("circle", {
                                      cx: "176",
                                      cy: "416",
                                      fill: "none",
                                      r: "16",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeLinejoin: "round",
                                      strokeWidth: "32"
                                    }), React.createElement("circle", {
                                      cx: "400",
                                      cy: "416",
                                      fill: "none",
                                      r: "16",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeLinejoin: "round",
                                      strokeWidth: "32"
                                    }), React.createElement("path", {
                                      d: "M48 80h64l48 272h256",
                                      fill: "none",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeLinejoin: "round",
                                      strokeWidth: "32"
                                    }), React.createElement("path", {
                                      d: "M160 288h249.44a8 8 0 007.85-6.43l28.8-144a8 8 0 00-7.85-9.57H128",
                                      fill: "none",
                                      stroke: "currentColor",
                                      strokeLinecap: "round",
                                      strokeLinejoin: "round",
                                      strokeWidth: "32"
                                    })), React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("Order anything")), React.createElement("p", {
                                  className: featuresParagraph
                                }, Utils$RescriptMonorepo.str("We don't limit your creativity, which means you can order whatever you feel like. You can also choose from our menu containing over 100 delicious meals. It's up to you!")))))), React.createElement("section", undefined, React.createElement("ul", {
                      className: mealsShowcase
                    }, React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Korean bibimbap\xc2\xa0with egg and vegetables",
                                  src: "/omnifood/1.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Simple italian pizza with cherry tomatoes",
                                  src: "/omnifood/2.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Chicken breast steak with vegetables",
                                  src: "/omnifood/3.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Autumn pumpkin soup",
                                  src: "/omnifood/4.jpg"
                                })))), React.createElement("ul", {
                      className: mealsShowcase
                    }, React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Paleo beef steak with vegetables",
                                  src: "/omnifood/5.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Healthy baguette with egg and vegetables",
                                  src: "/omnifood/6.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Burger with cheddar and bacon",
                                  src: "/omnifood/7.jpg"
                                }))), React.createElement("li", {
                          className: mealsLi
                        }, React.createElement("figure", {
                              className: mealFigure
                            }, React.createElement("img", {
                                  className: mealImg,
                                  alt: "Granola with cherries and strawberries",
                                  src: "/omnifood/8.jpg"
                                }))))), React.createElement("section", {
                  className: sectionSteps
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("How it works " + Utils$RescriptMonorepo.mdash + " Simple as 1, 2, 3"))), React.createElement("div", {
                      className: CssJs.merge([
                            row,
                            Tailwind$RescriptMonorepo.twStyle([
                                  Tailwind$RescriptMonorepo.grid,
                                  Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.gridCols(2)])
                                ])
                          ])
                    }, React.createElement("div", {
                          className: leftSection
                        }, React.createElement("img", {
                              className: appScreen,
                              alt: "Omnifood app on iPhone",
                              src: "/omnifood/app-iPhone.png"
                            })), React.createElement("div", {
                          className: rightSection
                        }, React.createElement("div", {
                              className: worksStop
                            }, React.createElement("div", {
                                  className: workStopNumber
                                }, Utils$RescriptMonorepo.str("1")), React.createElement("p", undefined, Utils$RescriptMonorepo.str("Choose the subscription plan that best fits your needs and sign up today."))), React.createElement("div", {
                              className: worksStop
                            }, React.createElement("div", {
                                  className: workStopNumber
                                }, Utils$RescriptMonorepo.str("2")), React.createElement("p", undefined, Utils$RescriptMonorepo.str("Order your delicious meal using our mobile app or website. Or you can even call us!"))), React.createElement("div", {
                              className: lastWorkStop
                            }, React.createElement("div", {
                                  className: workStopNumber
                                }, Utils$RescriptMonorepo.str("3")), React.createElement("p", undefined, Utils$RescriptMonorepo.str("Enjoy your meal after less than 20 minutes. See you the next time!"))), React.createElement("a", {
                              href: "#"
                            }, React.createElement("img", {
                                  className: btnAppImage,
                                  alt: "App Store Button",
                                  src: "/omnifood/download-app.svg"
                                })), React.createElement("a", {
                              href: "#"
                            }, React.createElement("img", {
                                  className: btnAppImage,
                                  alt: "Play Store Button",
                                  src: "/omnifood/download-app-android.png"
                                }))))), React.createElement("section", {
                  className: section
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("We're currently in these cities"))), React.createElement("div", {
                      className: fourColumns
                    }, React.createElement("div", {
                          className: box
                        }, React.createElement("img", {
                              className: boxImage,
                              alt: "Lisbon",
                              src: "/omnifood/lisbon-3.jpg"
                            }), React.createElement("h3", {
                              className: h3
                            }, Utils$RescriptMonorepo.str("Lisbon")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M332.64 64.58C313.18 43.57 286 32 256 32c-30.16 0-57.43 11.5-76.8 32.38-19.58 21.11-29.12 49.8-26.88 80.78C156.76 206.28 203.27 256 256 256s99.16-49.71 103.67-110.82c2.27-30.7-7.33-59.33-27.03-80.6zM432 480H80a31 31 0 01-24.2-11.13c-6.5-7.77-9.12-18.38-7.18-29.11C57.06 392.94 83.4 353.61 124.8 326c36.78-24.51 83.37-38 131.2-38s94.42 13.5 131.2 38c41.4 27.6 67.74 66.93 76.18 113.75 1.94 10.73-.68 21.34-7.18 29.11A31 31 0 01432 480z"
                                    })), Utils$RescriptMonorepo.str("1600+ happy eaters")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M394 480a16 16 0 01-9.39-3L256 383.76 127.39 477a16 16 0 01-24.55-18.08L153 310.35 23 221.2a16 16 0 019-29.2h160.38l48.4-148.95a16 16 0 0130.44 0l48.4 149H480a16 16 0 019.05 29.2L359 310.35l50.13 148.53A16 16 0 01394 480z"
                                    })), Utils$RescriptMonorepo.str("60+ top chefs")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z"
                                    })), React.createElement("a", {
                                  className: twitterLink,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("@omnifood_lx")))), React.createElement("div", {
                          className: box
                        }, React.createElement("img", {
                              className: boxImage,
                              alt: "San Francisco",
                              src: "/omnifood/san-francisco.jpg"
                            }), React.createElement("h3", {
                              className: h3
                            }, Utils$RescriptMonorepo.str("San Francisco")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M332.64 64.58C313.18 43.57 286 32 256 32c-30.16 0-57.43 11.5-76.8 32.38-19.58 21.11-29.12 49.8-26.88 80.78C156.76 206.28 203.27 256 256 256s99.16-49.71 103.67-110.82c2.27-30.7-7.33-59.33-27.03-80.6zM432 480H80a31 31 0 01-24.2-11.13c-6.5-7.77-9.12-18.38-7.18-29.11C57.06 392.94 83.4 353.61 124.8 326c36.78-24.51 83.37-38 131.2-38s94.42 13.5 131.2 38c41.4 27.6 67.74 66.93 76.18 113.75 1.94 10.73-.68 21.34-7.18 29.11A31 31 0 01432 480z"
                                    })), Utils$RescriptMonorepo.str("3700+ happy eaters")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M394 480a16 16 0 01-9.39-3L256 383.76 127.39 477a16 16 0 01-24.55-18.08L153 310.35 23 221.2a16 16 0 019-29.2h160.38l48.4-148.95a16 16 0 0130.44 0l48.4 149H480a16 16 0 019.05 29.2L359 310.35l50.13 148.53A16 16 0 01394 480z"
                                    })), Utils$RescriptMonorepo.str("160+ top chefs")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z"
                                    })), React.createElement("a", {
                                  className: twitterLink,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("@omnifood_sf")))), React.createElement("div", {
                          className: box
                        }, React.createElement("img", {
                              className: boxImage,
                              alt: "Berlin",
                              src: "/omnifood/berlin.jpg"
                            }), React.createElement("h3", {
                              className: h3
                            }, Utils$RescriptMonorepo.str("Berlin")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M332.64 64.58C313.18 43.57 286 32 256 32c-30.16 0-57.43 11.5-76.8 32.38-19.58 21.11-29.12 49.8-26.88 80.78C156.76 206.28 203.27 256 256 256s99.16-49.71 103.67-110.82c2.27-30.7-7.33-59.33-27.03-80.6zM432 480H80a31 31 0 01-24.2-11.13c-6.5-7.77-9.12-18.38-7.18-29.11C57.06 392.94 83.4 353.61 124.8 326c36.78-24.51 83.37-38 131.2-38s94.42 13.5 131.2 38c41.4 27.6 67.74 66.93 76.18 113.75 1.94 10.73-.68 21.34-7.18 29.11A31 31 0 01432 480z"
                                    })), Utils$RescriptMonorepo.str("2300+ happy eaters")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M394 480a16 16 0 01-9.39-3L256 383.76 127.39 477a16 16 0 01-24.55-18.08L153 310.35 23 221.2a16 16 0 019-29.2h160.38l48.4-148.95a16 16 0 0130.44 0l48.4 149H480a16 16 0 019.05 29.2L359 310.35l50.13 148.53A16 16 0 01394 480z"
                                    })), Utils$RescriptMonorepo.str("110+ top chefs")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z"
                                    })), React.createElement("a", {
                                  className: twitterLink,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("@omnifood_berlin")))), React.createElement("div", {
                          className: box
                        }, React.createElement("img", {
                              className: boxImage,
                              alt: "London",
                              src: "/omnifood/london.jpg"
                            }), React.createElement("h3", {
                              className: h3
                            }, Utils$RescriptMonorepo.str("London")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M332.64 64.58C313.18 43.57 286 32 256 32c-30.16 0-57.43 11.5-76.8 32.38-19.58 21.11-29.12 49.8-26.88 80.78C156.76 206.28 203.27 256 256 256s99.16-49.71 103.67-110.82c2.27-30.7-7.33-59.33-27.03-80.6zM432 480H80a31 31 0 01-24.2-11.13c-6.5-7.77-9.12-18.38-7.18-29.11C57.06 392.94 83.4 353.61 124.8 326c36.78-24.51 83.37-38 131.2-38s94.42 13.5 131.2 38c41.4 27.6 67.74 66.93 76.18 113.75 1.94 10.73-.68 21.34-7.18 29.11A31 31 0 01432 480z"
                                    })), Utils$RescriptMonorepo.str("1200+ happy eaters")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M394 480a16 16 0 01-9.39-3L256 383.76 127.39 477a16 16 0 01-24.55-18.08L153 310.35 23 221.2a16 16 0 019-29.2h160.38l48.4-148.95a16 16 0 0130.44 0l48.4 149H480a16 16 0 019.05 29.2L359 310.35l50.13 148.53A16 16 0 01394 480z"
                                    })), Utils$RescriptMonorepo.str("50+ top chefs")), React.createElement("div", {
                              className: cityFeature
                            }, React.createElement("svg", {
                                  className: iconSmall,
                                  viewBox: "0 0 512 512",
                                  xmlns: "http://www.w3.org/2000/svg"
                                }, React.createElement("path", {
                                      d: "M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z"
                                    })), React.createElement("a", {
                                  className: twitterLink,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("@omnifood_london")))))), React.createElement("section", {
                  className: customerSection
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("Our customers can't live without us"))), React.createElement("div", {
                      className: CssJs.merge([
                            Tailwind$RescriptMonorepo.twStyle([
                                  Tailwind$RescriptMonorepo.grid,
                                  Tailwind$RescriptMonorepo.gridCols(1),
                                  Tailwind$RescriptMonorepo.gap(6),
                                  Tailwind$RescriptMonorepo.minWBreakpoint(767, [Tailwind$RescriptMonorepo.gridCols(3)])
                                ]),
                            row
                          ])
                    }, React.createElement("blockquote", {
                          className: blockquote
                        }, Utils$RescriptMonorepo.str("Omnifood is just awesome! I just launched a startup which leaves me with no time for cooking, so Omnifood is a life-saver. Now that I got used to it, I couldn't live without my daily meals!\n          "), React.createElement("cite", {
                              className: cite
                            }, React.createElement("img", {
                                  className: customerImage,
                                  alt: "",
                                  src: "/omnifood/customer-1.jpg"
                                }), Utils$RescriptMonorepo.str("Alberto Duncan"))), React.createElement("blockquote", {
                          className: blockquote
                        }, Utils$RescriptMonorepo.str("Inexpensive, healthy and great-tasting meals, delivered right to my home. We have lots of food delivery here in Lisbon, but no one comes even close to Omifood. Me and my family are so in love!\n          "), React.createElement("cite", {
                              className: cite
                            }, React.createElement("img", {
                                  className: customerImage,
                                  alt: "",
                                  src: "/omnifood/customer-1.jpg"
                                }), Utils$RescriptMonorepo.str("Joana Silva"))), React.createElement("blockquote", {
                          className: blockquote
                        }, Utils$RescriptMonorepo.str("I was looking for a quick and easy food delivery service in San Franciso. I tried a lot of them and ended up with Omnifood. Best food delivery service in the Bay Area. Keep up the great work!\n          "), React.createElement("cite", {
                              className: cite
                            }, React.createElement("img", {
                                  className: customerImage,
                                  alt: "",
                                  src: "/omnifood/customer-1.jpg"
                                }), Utils$RescriptMonorepo.str("Milton Chapman"))))), React.createElement("section", {
                  className: sectionPlans,
                  id: "pricing"
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("Start eating healthy today"))), React.createElement("div", {
                      className: threeColumnsPricing
                    }, React.createElement("div", {
                          className: planBox
                        }, React.createElement("div", {
                              className: priceSection
                            }, React.createElement("div", undefined, React.createElement("h3", {
                                      className: h3
                                    }, Utils$RescriptMonorepo.str("Premium")), React.createElement("p", {
                                      className: planPrice
                                    }, Utils$RescriptMonorepo.str("399$ "), React.createElement("span", {
                                          className: planPriceSpan
                                        }, Utils$RescriptMonorepo.str("per month"))), React.createElement("p", {
                                      className: planPriceMeal
                                    }, Utils$RescriptMonorepo.str("That's only 13.30$ per meal")))), React.createElement("div", {
                              className: planBoxDiv
                            }, React.createElement("ul", undefined, React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("1 meal every day")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Order 24/7")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Access to newest creations")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Free delivery")))), React.createElement("div", {
                              className: buttonSection
                            }, React.createElement("a", {
                                  className: btnFull,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("Sign up now")))), React.createElement("div", {
                          className: planBox
                        }, React.createElement("div", {
                              className: priceSection
                            }, React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("Pro")), React.createElement("p", {
                                  className: planPrice
                                }, Utils$RescriptMonorepo.str("149$ "), React.createElement("span", {
                                      className: planPriceSpan
                                    }, Utils$RescriptMonorepo.str("per month"))), React.createElement("p", {
                                  className: planPriceMeal
                                }, Utils$RescriptMonorepo.str("That's only 14.90$ per meal"))), React.createElement("div", {
                              className: planBoxDiv
                            }, React.createElement("ul", undefined, React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("1 meal 10 days/month")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Order 24/7")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Access to newest creations")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Free delivery")))), React.createElement("div", {
                              className: buttonSection
                            }, React.createElement("a", {
                                  className: btnGhost,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("Sign up now")))), React.createElement("div", {
                          className: planBox
                        }, React.createElement("div", {
                              className: priceSection
                            }, React.createElement("h3", {
                                  className: h3
                                }, Utils$RescriptMonorepo.str("Starter")), React.createElement("p", {
                                  className: planPrice
                                }, Utils$RescriptMonorepo.str("19$ "), React.createElement("span", {
                                      className: planPriceSpan
                                    }, Utils$RescriptMonorepo.str("per meal"))), React.createElement("p", {
                                  className: planPriceMeal
                                }, Utils$RescriptMonorepo.str(Utils$RescriptMonorepo.nbsp))), React.createElement("div", {
                              className: planBoxDiv
                            }, React.createElement("ul", undefined, React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("1 meal")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Order from 8 am to 12 pm")), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M368 368L144 144M368 144L144 368",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            }))), React.createElement("li", {
                                      className: planBoxLi
                                    }, React.createElement("svg", {
                                          className: iconSmall,
                                          viewBox: "0 0 512 512",
                                          xmlns: "http://www.w3.org/2000/svg"
                                        }, React.createElement("path", {
                                              d: "M416 128L192 384l-96-96",
                                              fill: "none",
                                              stroke: "currentColor",
                                              strokeLinecap: "round",
                                              strokeLinejoin: "round",
                                              strokeWidth: "32"
                                            })), Utils$RescriptMonorepo.str("Free delivery")))), React.createElement("div", {
                              className: buttonSection
                            }, React.createElement("a", {
                                  className: btnGhost,
                                  href: "#"
                                }, Utils$RescriptMonorepo.str("Sign up now")))))), React.createElement("section", {
                  className: section
                }, React.createElement("div", {
                      className: row
                    }, React.createElement("h2", {
                          className: h2
                        }, Utils$RescriptMonorepo.str("We're happy to hear from you"))), React.createElement("div", {
                      className: row
                    }, React.createElement("form", {
                          className: contactForm,
                          action: "#",
                          method: "post"
                        }, React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.col(1)])])])
                                }, React.createElement("label", {
                                      className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(767, [
                                                        Tailwind$RescriptMonorepo.flex,
                                                        Tailwind$RescriptMonorepo.h("full"),
                                                        Tailwind$RescriptMonorepo.itemsCenter
                                                      ])])]),
                                      htmlFor: "name"
                                    }, Utils$RescriptMonorepo.str("Name"))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                              Tailwind$RescriptMonorepo.col(1),
                                              Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.col(2)])
                                            ])])
                                }, React.createElement("input", {
                                      className: inputStyles,
                                      id: "name",
                                      name: "name",
                                      placeholder: "Your name",
                                      required: true,
                                      type: "text"
                                    }))), React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                              Tailwind$RescriptMonorepo.mt(4),
                                              Tailwind$RescriptMonorepo.col(1),
                                              Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.mt(0)])
                                            ])])
                                }, React.createElement("label", {
                                      className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(481, [
                                                        Tailwind$RescriptMonorepo.flex,
                                                        Tailwind$RescriptMonorepo.h("full"),
                                                        Tailwind$RescriptMonorepo.itemsCenter
                                                      ])])]),
                                      htmlFor: "email"
                                    }, Utils$RescriptMonorepo.str("Email"))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(2)])])
                                }, React.createElement("input", {
                                      className: inputStyles,
                                      id: "email",
                                      name: "name",
                                      placeholder: "Your email",
                                      required: true,
                                      type: "email"
                                    }))), React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                              Tailwind$RescriptMonorepo.mt(4),
                                              Tailwind$RescriptMonorepo.col(1),
                                              Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.mt(0)])
                                            ])])
                                }, React.createElement("label", {
                                      className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(481, [
                                                        Tailwind$RescriptMonorepo.flex,
                                                        Tailwind$RescriptMonorepo.h("full"),
                                                        Tailwind$RescriptMonorepo.itemsCenter
                                                      ])])]),
                                      htmlFor: "find-us"
                                    }, Utils$RescriptMonorepo.str("How did you find us"))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(2)])])
                                }, React.createElement("select", {
                                      className: inputStyles,
                                      id: "find-us",
                                      name: "find-us"
                                    }, React.createElement("option", {
                                          selected: true,
                                          value: "friends"
                                        }, Utils$RescriptMonorepo.str("Friends")), React.createElement("option", {
                                          value: "search"
                                        }, Utils$RescriptMonorepo.str("Search engine")), React.createElement("option", {
                                          value: "ad"
                                        }, Utils$RescriptMonorepo.str("Advertisement")), React.createElement("option", {
                                          value: "other"
                                        }, Utils$RescriptMonorepo.str("Other"))))), React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                              Tailwind$RescriptMonorepo.col(1),
                                              Tailwind$RescriptMonorepo.mt(4),
                                              Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.mt(0)])
                                            ])])
                                }, React.createElement("label", {
                                      className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(481, [
                                                        Tailwind$RescriptMonorepo.flex,
                                                        Tailwind$RescriptMonorepo.h("full"),
                                                        Tailwind$RescriptMonorepo.itemsEnd
                                                      ])])]),
                                      htmlFor: "news"
                                    }, Utils$RescriptMonorepo.str("Newsletter"))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(2)])])
                                }, React.createElement("input", {
                                      className: checkboxStyles,
                                      id: "news",
                                      name: "news",
                                      type: "checkbox"
                                    }), Utils$RescriptMonorepo.str("Yes, please"))), React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([
                                              Tailwind$RescriptMonorepo.col(1),
                                              Tailwind$RescriptMonorepo.mt(4),
                                              Tailwind$RescriptMonorepo.minWBreakpoint(481, [Tailwind$RescriptMonorepo.mt(0)])
                                            ])])
                                }, React.createElement("label", {
                                      className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.minWBreakpoint(481, [
                                                        Tailwind$RescriptMonorepo.flex,
                                                        Tailwind$RescriptMonorepo.h("full"),
                                                        Tailwind$RescriptMonorepo.itemsCenter
                                                      ])])]),
                                      htmlFor: "message"
                                    }, Utils$RescriptMonorepo.str("Drop us a line"))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(2)])])
                                }, React.createElement("textarea", {
                                      className: textareaStyles,
                                      id: "message",
                                      name: "message",
                                      placeholder: "Your message"
                                    }))), React.createElement("div", {
                              className: threeColumns
                            }, React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(1)])])
                                }, React.createElement("label", {
                                      htmlFor: ""
                                    }, Utils$RescriptMonorepo.str(Utils$RescriptMonorepo.nbsp))), React.createElement("div", {
                                  className: Tailwind$RescriptMonorepo.merge([Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.col(2)])])
                                }, React.createElement("button", {
                                      className: CssJs.merge([
                                            btnFull,
                                            Tailwind$RescriptMonorepo.twStyle([Tailwind$RescriptMonorepo.mt(5)])
                                          ]),
                                      type: "submit"
                                    }, Utils$RescriptMonorepo.str("Send it!"))))))), React.createElement("footer", {
                  className: footer
                }, React.createElement("div", {
                      className: twoColumns
                    }, React.createElement("div", undefined, React.createElement("ul", {
                              className: footerNav
                            }, React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("a", {
                                      className: navLink,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("About us"))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("a", {
                                      className: navLink,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Blog"))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("a", {
                                      className: navLink,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Press"))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("a", {
                                      className: navLink,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("iOS App"))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("a", {
                                      className: navLink,
                                      href: "#"
                                    }, Utils$RescriptMonorepo.str("Android App"))))), React.createElement("div", undefined, React.createElement("ul", {
                              className: socialLinks
                            }, React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("svg", {
                                      className: iconNav,
                                      viewBox: "0 0 512 512",
                                      xmlns: "http://www.w3.org/2000/svg"
                                    }, React.createElement("path", {
                                          d: "M480 257.35c0-123.7-100.3-224-224-224s-224 100.3-224 224c0 111.8 81.9 204.47 189 221.29V322.12h-56.89v-64.77H221V208c0-56.13 33.45-87.16 84.61-87.16 24.51 0 50.15 4.38 50.15 4.38v55.13H327.5c-27.81 0-36.51 17.26-36.51 35v42h62.12l-9.92 64.77H291v156.54c107.1-16.81 189-109.48 189-221.31z",
                                          fillRule: "evenodd"
                                        }))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("svg", {
                                      className: iconNav,
                                      viewBox: "0 0 512 512",
                                      xmlns: "http://www.w3.org/2000/svg"
                                    }, React.createElement("path", {
                                          d: "M496 109.5a201.8 201.8 0 01-56.55 15.3 97.51 97.51 0 0043.33-53.6 197.74 197.74 0 01-62.56 23.5A99.14 99.14 0 00348.31 64c-54.42 0-98.46 43.4-98.46 96.9a93.21 93.21 0 002.54 22.1 280.7 280.7 0 01-203-101.3A95.69 95.69 0 0036 130.4c0 33.6 17.53 63.3 44 80.7A97.5 97.5 0 0135.22 199v1.2c0 47 34 86.1 79 95a100.76 100.76 0 01-25.94 3.4 94.38 94.38 0 01-18.51-1.8c12.51 38.5 48.92 66.5 92.05 67.3A199.59 199.59 0 0139.5 405.6a203 203 0 01-23.5-1.4A278.68 278.68 0 00166.74 448c181.36 0 280.44-147.7 280.44-275.8 0-4.2-.11-8.4-.31-12.5A198.48 198.48 0 00496 109.5z"
                                        }))), React.createElement("li", {
                                  className: footerLi
                                }, React.createElement("svg", {
                                      className: iconNav,
                                      viewBox: "0 0 512 512",
                                      xmlns: "http://www.w3.org/2000/svg"
                                    }, React.createElement("path", {
                                          d: "M473.16 221.48l-2.26-9.59H262.46v88.22H387c-12.93 61.4-72.93 93.72-121.94 93.72-35.66 0-73.25-15-98.13-39.11a140.08 140.08 0 01-41.8-98.88c0-37.16 16.7-74.33 41-98.78s61-38.13 97.49-38.13c41.79 0 71.74 22.19 82.94 32.31l62.69-62.36C390.86 72.72 340.34 32 261.6 32c-60.75 0-119 23.27-161.58 65.71C58 139.5 36.25 199.93 36.25 256s20.58 113.48 61.3 155.6c43.51 44.92 105.13 68.4 168.58 68.4 57.73 0 112.45-22.62 151.45-63.66 38.34-40.4 58.17-96.3 58.17-154.9 0-24.67-2.48-39.32-2.59-39.96z"
                                        }))), React.createElement("li", {
                                  className: lastLi
                                }, React.createElement("svg", {
                                      className: iconNav,
                                      viewBox: "0 0 512 512",
                                      xmlns: "http://www.w3.org/2000/svg"
                                    }, React.createElement("path", {
                                          d: "M349.33 69.33a93.62 93.62 0 0193.34 93.34v186.66a93.62 93.62 0 01-93.34 93.34H162.67a93.62 93.62 0 01-93.34-93.34V162.67a93.62 93.62 0 0193.34-93.34h186.66m0-37.33H162.67C90.8 32 32 90.8 32 162.67v186.66C32 421.2 90.8 480 162.67 480h186.66C421.2 480 480 421.2 480 349.33V162.67C480 90.8 421.2 32 349.33 32z"
                                        }), React.createElement("path", {
                                          d: "M377.33 162.67a28 28 0 1128-28 27.94 27.94 0 01-28 28zM256 181.33A74.67 74.67 0 11181.33 256 74.75 74.75 0 01256 181.33m0-37.33a112 112 0 10112 112 112 112 0 00-112-112z"
                                        })))))), React.createElement("div", {
                      className: row
                    }, React.createElement("p", {
                          className: footerText
                        }, Utils$RescriptMonorepo.str("Copyright " + Utils$RescriptMonorepo.copySymbol + " 2020 by Explorer Lab's")))));
}

export {
  $$default ,
  $$default as default,
  
}
/* smallGlobal Not a pure module */
