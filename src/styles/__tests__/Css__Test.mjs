// Generated by ReScript, PLEASE EDIT WITH CARE

import * as React from "react";
import * as Css from "@emotion/css";
import * as React$1 from "@cypress/react";
import * as Css$RescriptMonorepo from "../Css.mjs";
import * as Utils$RescriptMonorepo from "../../utils/Utils.mjs";
import * as Cypress$RescriptMonorepo from "../../bindings/Cypress.mjs";

function Css__Test$Component(Props) {
  var childrenOpt = Props.children;
  var classNameOpt = Props.className;
  var children = childrenOpt !== undefined ? childrenOpt : "";
  var className = classNameOpt !== undefined ? classNameOpt : "";
  return React.createElement("div", {
              className: className,
              id: "id"
            }, Utils$RescriptMonorepo.str(children));
}

var Component = {
  make: Css__Test$Component
};

Cypress$RescriptMonorepo.describe("align-content works", (function (param) {
        var valArr = [
          "normal",
          "spaceBetween",
          "spaceAround",
          "spaceEvenly",
          "stretch",
          "start",
          "center",
          "end",
          "flexStart",
          "flexEnd",
          "baseline",
          "safeCenter",
          "unsafeCenter"
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("align-content: " + Css$RescriptMonorepo.AlignContent.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      className: Css$RescriptMonorepo.alignContent(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "align-content", Css$RescriptMonorepo.AlignContent.toValue(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("align-items works", (function (param) {
        var valArr = [
          "normal",
          "stretch",
          "start",
          "center",
          "end",
          "flexStart",
          "flexEnd",
          "baseline",
          "safeCenter",
          "unsafeCenter"
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("align-items: " + Css$RescriptMonorepo.AlignItems.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      className: Css$RescriptMonorepo.alignItems(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "align-items", Css$RescriptMonorepo.AlignItems.toValue(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("align-self works", (function (param) {
        var valArr = [
          "normal",
          "stretch",
          "baseline",
          "start",
          "center",
          "end",
          "flexStart",
          "flexEnd",
          "selfStart",
          "selfEnd",
          "safeCenter",
          "unsafeCenter"
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("align-items: " + Css$RescriptMonorepo.AlignSelf.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      className: Css$RescriptMonorepo.alignSelf(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "align-items", Css$RescriptMonorepo.AlignSelf.toValue(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("all works", (function (param) {
        var valArr = [
          "unset",
          "initial",
          "inherit"
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("all: " + Css$RescriptMonorepo.All.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      children: "Hello tester",
                                      className: Css.cx([
                                            Css.css("\n        color: red;\n      "),
                                            Css$RescriptMonorepo.all(val)
                                          ])
                                    }));
                            return Cypress$RescriptMonorepo.shouldNotHaveCss(cy.get("#id", undefined), "color", "rgb(255, 0, 0)");
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("animation-delay works", (function (param) {
        var valArr = [
          {
            NAME: "ms",
            VAL: 250
          },
          {
            NAME: "ms",
            VAL: 12
          },
          {
            NAME: "s",
            VAL: 2
          },
          {
            NAME: "s",
            VAL: -2
          }
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("animation-delay: " + Css$RescriptMonorepo.AnimationDelay.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      children: "Hello tester",
                                      className: Css$RescriptMonorepo.animationDelay(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "animation-delay", Css$RescriptMonorepo.AnimationDelay.toValue(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("animation-direction works", (function (param) {
        var valArr = [
          "normal",
          "reverse",
          "alternate",
          "alternateReverse"
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("animation-direction: " + Css$RescriptMonorepo.AnimationDirection.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      children: "Hello tester",
                                      className: Css$RescriptMonorepo.animationDirection(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "animation-direction", Css$RescriptMonorepo.AnimationDirection.toValue(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("animation-direction for multiple values works", (function (param) {
        var valArr = [
          [
            "normal",
            "reverse"
          ],
          [
            "alternate",
            "reverse",
            "normal"
          ]
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("animation-direction: " + Css$RescriptMonorepo.renderMultipleValues(val.map(function (item) {
                                  return Css$RescriptMonorepo.AnimationDirection.toValue(item);
                                })) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      children: "Hello tester",
                                      className: Css$RescriptMonorepo.animationDirectionMany(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "animation-direction", Css$RescriptMonorepo.AnimationDirection.toManyValues(val));
                          }));
            });
        
      }));

Cypress$RescriptMonorepo.describe("animation-duration works", (function (param) {
        var valArr = [
          {
            NAME: "ms",
            VAL: 250
          },
          {
            NAME: "ms",
            VAL: 12
          },
          {
            NAME: "s",
            VAL: 2
          }
        ];
        valArr.map(function (val) {
              return Cypress$RescriptMonorepo.it("animation-duration: " + Css$RescriptMonorepo.AnimationDuration.toValue(val) + " - works", (function (param) {
                            React$1.mount(React.createElement(Css__Test$Component, {
                                      children: "Hello tester",
                                      className: Css$RescriptMonorepo.animationDuration(val)
                                    }));
                            return Cypress$RescriptMonorepo.shouldHaveCss(cy.get("#id", undefined), "animation-duration", Css$RescriptMonorepo.AnimationDuration.toValue(val));
                          }));
            });
        
      }));

export {
  Component ,
  
}
/*  Not a pure module */
