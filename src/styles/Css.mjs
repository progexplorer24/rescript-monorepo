// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Css from "@emotion/css";

function declaration(property, value) {
  return property + ": " + value + ";";
}

function breakpointSpecifity(breakpoint, rules) {
  return "." + breakpoint + "& {\n    " + rules + "\n}";
}

function toValue(type_) {
  if (type_ === "maxWidth") {
    return "max-width";
  } else {
    return "min-width";
  }
}

var BreakpointType = {
  toValue: toValue
};

function responsiveBreakpoint(breakpoint, css, type_Opt, param) {
  var type_ = type_Opt !== undefined ? type_Opt : "minWidth";
  return Css.css("\n      @media (" + toValue(type_) + ": " + String(breakpoint) + "px) {\n        " + css + "\n      }\n    ");
}

function minWidth(breakpoint, rules) {
  return Css.css("@media (min-width: " + String(breakpoint) + "px) {\n        " + rules + "\n      }");
}

function sm(styles) {
  return Css.css(minWidth(640, styles));
}

function toValue$1(value) {
  if (value === "initial") {
    return "initial";
  } else if (value === "spaceAround") {
    return "space-around";
  } else if (value === "stretch") {
    return "stretch";
  } else if (value === "end") {
    return "end";
  } else if (value === "start") {
    return "start";
  } else if (value === "center") {
    return "center";
  } else if (value === "revert") {
    return "revert";
  } else if (value === "baseline") {
    return "baseline";
  } else if (value === "spaceBetween") {
    return "space-between";
  } else if (value === "unset") {
    return "unset";
  } else if (value === "flexStart") {
    return "flex-start";
  } else if (value === "unsafeCenter") {
    return "unsafe center";
  } else if (value === "inherit") {
    return "inherit";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "flexEnd") {
    return "flex-end";
  } else if (value === "safeCenter") {
    return "safe center";
  } else {
    return "space-evenly";
  }
}

var AlignContent = {
  toValue: toValue$1
};

function toValue$2(value) {
  if (value === "end") {
    return "end";
  } else if (value === "start") {
    return "start";
  } else if (value === "center") {
    return "center";
  } else if (value === "baseline") {
    return "baseline";
  } else if (value === "flexStart") {
    return "flex-start";
  } else if (value === "unsafeCenter") {
    return "unsafe center";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "flexEnd") {
    return "flex-end";
  } else if (value === "safeCenter") {
    return "safe center";
  } else {
    return "stretch";
  }
}

var AlignItems = {
  toValue: toValue$2
};

function toValue$3(value) {
  if (value === "end") {
    return "end";
  } else if (value === "selfEnd") {
    return "self-end";
  } else if (value === "start") {
    return "start";
  } else if (value === "center") {
    return "center";
  } else if (value === "baseline") {
    return "baseline";
  } else if (value === "flexStart") {
    return "flex-start";
  } else if (value === "unsafeCenter") {
    return "unsafe center";
  } else if (value === "normal") {
    return "normal";
  } else if (value === "flexEnd") {
    return "flex-end";
  } else if (value === "safeCenter") {
    return "safe center";
  } else if (value === "selfStart") {
    return "self-start";
  } else {
    return "stretch";
  }
}

var AlignSelf = {
  toValue: toValue$3
};

function toValue$4(val) {
  if (val === "revert") {
    return "revert";
  } else if (val === "unset") {
    return "unset";
  } else if (val === "inherit") {
    return "inherit";
  } else {
    return "initial";
  }
}

var All = {
  toValue: toValue$4
};

function toAngle(angle) {
  var variant = angle.NAME;
  if (variant === "turn") {
    return String(angle.VAL) + "turn";
  } else if (variant === "deg") {
    return String(angle.VAL) + "deg";
  } else if (variant === "rad") {
    return String(angle.VAL) + "rad";
  } else {
    return String(angle.VAL) + "grad";
  }
}

var Angle = {
  toAngle: toAngle
};

function toValue$5(val) {
  if (val.NAME === "ms") {
    return String(val.VAL / 1000) + "s";
  } else {
    return String(val.VAL) + "s";
  }
}

var AnimationDelay = {
  toValue: toValue$5
};

function renderMultipleValues(values) {
  return values.join(", ");
}

function toValue$6(val) {
  if (val === "alternateReverse") {
    return "alternate-reverse";
  } else if (val === "normal") {
    return "normal";
  } else if (val === "alternate") {
    return "alternate";
  } else {
    return "reverse";
  }
}

function toManyValues(values) {
  return values.map(toValue$6).join(", ");
}

var AnimationDirection = {
  toValue: toValue$6,
  toManyValues: toManyValues
};

function toValue$7(value) {
  if (value.NAME === "ms") {
    return String(value.VAL / 1000) + "s";
  } else {
    return String(value.VAL) + "s";
  }
}

var AnimationDuration = {
  toValue: toValue$7
};

var AnimationFillMode = {};

var AnimationIterationCount = {};

function toValue$8(color) {
  return "#" + color.VAL;
}

var Color = {
  toValue: toValue$8
};

function alignContent(value) {
  return Css.css(declaration("align-content", toValue$1(value)));
}

function alignContentRaw(value) {
  return declaration("align-content", toValue$1(value));
}

function alignItems(value) {
  return Css.css(declaration("align-items", toValue$2(value)));
}

function alignSelf(value) {
  return Css.css(declaration("align-items", toValue$3(value)));
}

function all(value) {
  return Css.css(declaration("all", toValue$4(value)));
}

function animationDelay(value) {
  return Css.css(declaration("animation-delay", toValue$5(value)));
}

function animationDirection(value) {
  return Css.css(declaration("animation-direction", toValue$6(value)));
}

function animationDirectionMany(values) {
  return Css.css(declaration("animation-direction", toManyValues(values)));
}

function animationDuration(value) {
  return Css.css(declaration("animation-duration", toValue$7(value)));
}

function color(hex) {
  return Css.css(declaration("color", toValue$8({
                      NAME: "hex",
                      VAL: hex
                    })));
}

function colorRaw(hex) {
  return declaration("color", toValue$8({
                  NAME: "hex",
                  VAL: hex
                }));
}

export {
  declaration ,
  breakpointSpecifity ,
  BreakpointType ,
  responsiveBreakpoint ,
  minWidth ,
  sm ,
  AlignContent ,
  AlignItems ,
  AlignSelf ,
  All ,
  Angle ,
  AnimationDelay ,
  renderMultipleValues ,
  AnimationDirection ,
  AnimationDuration ,
  AnimationFillMode ,
  AnimationIterationCount ,
  Color ,
  alignContent ,
  alignContentRaw ,
  alignItems ,
  alignSelf ,
  all ,
  animationDelay ,
  animationDirection ,
  animationDirectionMany ,
  animationDuration ,
  color ,
  colorRaw ,
  
}
/* @emotion/css Not a pure module */
