// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";

function toValue(value) {
  if (value === "notBeLte") {
    return "not.be.lte";
  } else if (value === "beCalledWithMatch") {
    return "be.calledWithMatch";
  } else if (value === "beGt") {
    return "be.gt";
  } else if (value === "beLt") {
    return "be.lt";
  } else if (value === "beVisible") {
    return "be.visible";
  } else if (value === "notBeFocused") {
    return "not.be.focused";
  } else if (value === "beCalledThrice") {
    return "be.calledThrice";
  } else if (value === "haveClass") {
    return "have.class";
  } else if (value === "beAtLeast") {
    return "be.at.least";
  } else if (value === "beAtMost") {
    return "be.at.most";
  } else if (value === "alwaysBeCalledWithExactly") {
    return "always.be.calledWithExactly";
  } else if (value === "beHidden") {
    return "be.hidden";
  } else if (value === "alwaysBeCalledWithMatch") {
    return "always.be.calledWithMatch";
  } else if (value === "beCalledBefore") {
    return "be.calledBefore";
  } else if (value === "beEmpty") {
    return "be.empty";
  } else if (value === "include") {
    return "include";
  } else if (value === "alwaysBeCalledWithNew") {
    return "always.be.calledWithNew";
  } else if (value === "beWithin") {
    return "be.within";
  } else if (value === "haveAlwaysReturned") {
    return "have.always.returned";
  } else if (value === "alwaysBeCalledOn") {
    return "always.be.calledOn";
  } else if (value === "beSelected") {
    return "be.selected";
  } else if (value === "haveCss") {
    return "have.css";
  } else if (value === "notBeOneOf") {
    return "not.be.oneOf";
  } else if (value === "notHaveDescendants") {
    return "not.have.descendants";
  } else if (value === "beCalledWithExactly") {
    return "be.calledWithExactly";
  } else if (value === "notBeCalled") {
    return "not.be.called";
  } else if (value === "notContain") {
    return "not.contain";
  } else if (value === "beCalledTwice") {
    return "be.calledTwice";
  } else if (value === "haveAnyKeys") {
    return "have.any.keys";
  } else if (value === "haveMembers") {
    return "have.members";
  } else if (value === "haveProperty") {
    return "have.property";
  } else if (value === "notBeCalledOnce") {
    return "not.be.calledOnce";
  } else if (value === "beCalledAfter") {
    return "be.calledAfter";
  } else if (value === "haveOrderedMembers") {
    return "have.ordered.members";
  } else if (value === "equal") {
    return "equal";
  } else if (value === "exist") {
    return "exist";
  } else if (value === "haveAlwaysThrown") {
    return "have.always.thrown";
  } else if (value === "notHaveLength") {
    return "not.have.length";
  } else if (value === "beAbove") {
    return "be.above";
  } else if (value === "haveCallCount") {
    return "have.callCount";
  } else if (value === "notBeHidden") {
    return "not.be.hidden";
  } else if (value === "notHaveAnyKeys") {
    return "not.have.any.keys";
  } else if (value === "haveAttr") {
    return "have.attr";
  } else if (value === "eq") {
    return "eq";
  } else if (value === "haveData") {
    return "have.data";
  } else if (value === "notEqual") {
    return "not.eq";
  } else if (value === "haveFocus") {
    return "have.focus";
  } else if (value === "match") {
    return "match";
  } else if (value === "alwaysBeCalledWith") {
    return "always.be.calledWith";
  } else if (value === "haveHtml") {
    return "have.html";
  } else if (value === "includeKeys") {
    return "include.keys";
  } else if (value === "notExist") {
    return "not.exist";
  } else if (value === "notBeNull") {
    return "not.be.null";
  } else if (value === "haveProp") {
    return "have.prop";
  } else if (value === "beNull") {
    return "be.null";
  } else if (value === "haveText") {
    return "have.text";
  } else if (value === "notBeCalledWithNew") {
    return "not.be.calledWithNew";
  } else if (value === "throw") {
    return "throw";
  } else if (value === "haveDeepKeys") {
    return "have.deep.keys";
  } else if (value === "beBelow") {
    return "be.below";
  } else if (value === "notDeepEqual") {
    return "not.deep.equal";
  } else if (value === "haveDescendants") {
    return "have.descendants";
  } else if (value === "deepInclude") {
    return "deep.include";
  } else if (value === "beOneOf") {
    return "be.oneOf";
  } else if (value === "notMatch") {
    return "not.match";
  } else if (value === "notBeCalledThrice") {
    return "not.be.calledThrice";
  } else if (value === "haveThrown") {
    return "have.thrown";
  } else if (value === "notHaveValue") {
    return "not.have.value";
  } else if (value === "notBeChecked") {
    return "not.be.checked";
  } else if (value === "beCloseTo") {
    return "be.close.to";
  } else if (value === "notBeCalledTwice") {
    return "not.be.calledTwice";
  } else if (value === "contain") {
    return "contain";
  } else if (value === "notIncludeKeys") {
    return "not.include.keys";
  } else if (value === "beCalledOnce") {
    return "be.calledOnce";
  } else if (value === "haveDeepProperty") {
    return "have.deep.property";
  } else if (value === "notBeCalledAfter") {
    return "not.be.calledAfter";
  } else if (value === "beEnabled") {
    return "be.enabled";
  } else if (value === "includeNested") {
    return "include.nested";
  } else if (value === "notBeCalledBefore") {
    return "not.be.calledBefore";
  } else if (value === "notBeEmpty") {
    return "not.be.empty";
  } else if (value === "notThrow") {
    return "not.throw";
  } else if (value === "notEq") {
    return "not.eq";
  } else if (value === "beCalledWith") {
    return "be.calledWith";
  } else if (value === "haveDeepMembers") {
    return "have.deep.members";
  } else if (value === "notInclude") {
    return "not.include";
  } else if (value === "haveAllKeys") {
    return "have.all.keys";
  } else if (value === "haveLength") {
    return "have.length";
  } else if (value === "notBeVisible") {
    return "not.be.visible";
  } else if (value === "notHaveCallCount") {
    return "not.have.callCount";
  } else if (value === "haveReturned") {
    return "have.returned";
  } else if (value === "notHaveClass") {
    return "not.have.class";
  } else if (value === "beDisabled") {
    return "be.disabled";
  } else if (value === "notHaveOrderedMembers") {
    return "not.have.ordered.members";
  } else if (value === "deepEqual") {
    return "deep.equal";
  } else if (value === "notHaveAttr") {
    return "not.have.attr";
  } else if (value === "notHaveData") {
    return "not.have.data";
  } else if (value === "haveValue") {
    return "have.value";
  } else if (value === "beGte") {
    return "be.gte";
  } else if (value === "beLte") {
    return "be.lte";
  } else if (value === "notHaveCss") {
    return "not.have.css";
  } else if (value === "beCalledOn") {
    return "be.calledOn";
  } else if (value === "beChecked") {
    return "be.checked";
  } else if (value === "notHaveHtml") {
    return "not.have.html";
  } else if (value === "notHaveAllKeys") {
    return "not.have.all.keys";
  } else if (value === "notBeGt") {
    return "not.be.gt";
  } else if (value === "notBeLt") {
    return "not.be.lt";
  } else if (value === "notBeSelected") {
    return "not.be.selected";
  } else if (value === "notHaveProp") {
    return "not.have.prop";
  } else if (value === "beCalled") {
    return "be.called";
  } else if (value === "notHaveId") {
    return "not.have.id";
  } else if (value === "notHaveText") {
    return "not.have.text";
  } else if (value === "haveNestedProperty") {
    return "have.nested.property";
  } else if (value === "notHaveProperty") {
    return "not.have.property";
  } else if (value === "beCalledWithNew") {
    return "be.calledWithNew";
  } else if (value === "haveId") {
    return "have.id";
  } else {
    return "not.be.gte";
  }
}

var Assertions = {
  toValue: toValue
};

var Timeouts = {
  defaultCommandTimeout: 4000,
  execTimeout: 60000,
  taskTimeout: 60000,
  pageLoadTimeout: 60000,
  requestTimeout: 5000,
  responseTimeout: 30000
};

var Acitonability = {
  animationDistanceThreshold: 5,
  waitForAnimations: true,
  scrollBehavior: "top"
};

function toValue$1(value) {
  if (value === "nearest") {
    return "nearest";
  } else if (value === "false") {
    return "false";
  } else if (value === "top") {
    return "top";
  } else if (value === "center") {
    return "center";
  } else {
    return "bottom";
  }
}

var ScrollBehavior = {
  toValue: toValue$1
};

function make(logOpt, forceOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var force = forceOpt !== undefined ? forceOpt : false;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  return {
          log: log,
          force: force,
          timeout: timeout
        };
}

var BlurOptions = {
  make: make
};

function make$1(animationDistanceThresholdOpt, logOpt, forceOpt, scrollBehaviorOpt, timeoutOpt, waitForAnimationsOpt, param) {
  var animationDistanceThreshold = animationDistanceThresholdOpt !== undefined ? animationDistanceThresholdOpt : 5;
  var log = logOpt !== undefined ? logOpt : true;
  var force = forceOpt !== undefined ? forceOpt : false;
  var scrollBehavior = scrollBehaviorOpt !== undefined ? scrollBehaviorOpt : "top";
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var waitForAnimations = waitForAnimationsOpt !== undefined ? waitForAnimationsOpt : true;
  return {
          animationDistanceThreshold: animationDistanceThreshold,
          log: log,
          force: force,
          scrollBehavior: toValue$1(scrollBehavior),
          timeout: timeout,
          waitForAnimations: waitForAnimations
        };
}

var CheckOptions = {
  make: make$1
};

function make$2(animationDistanceThresholdOpt, forceOpt, logOpt, scrollBehaviorOpt, timeoutOpt, waitForAnimationsOpt, param) {
  var animationDistanceThreshold = animationDistanceThresholdOpt !== undefined ? animationDistanceThresholdOpt : 5;
  var force = forceOpt !== undefined ? forceOpt : false;
  var log = logOpt !== undefined ? logOpt : true;
  var scrollBehavior = scrollBehaviorOpt !== undefined ? scrollBehaviorOpt : "top";
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var waitForAnimations = waitForAnimationsOpt !== undefined ? waitForAnimationsOpt : true;
  return {
          animationDistanceThreshold: animationDistanceThreshold,
          force: force,
          log: log,
          scrollBehavior: scrollBehavior,
          timeout: timeout,
          waitForAnimations: waitForAnimations
        };
}

var ClearOptions = {
  make: make$2
};

function make$3(logOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  return {
          log: log,
          timeout: timeout
        };
}

var ChildrenOptions = {
  make: make$3
};

function make$4(logOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 60000;
  return {
          log: log,
          timeout: timeout
        };
}

var GoOptions = {
  make: make$4
};

function make$5(logOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 60000;
  return {
          log: log,
          timeout: timeout
        };
}

var TaskOptions = {
  make: make$5
};

function make$6(logOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  return {
          log: log
        };
}

var LocalStorageOptions = {
  make: make$6
};

function make$7(timeoutOpt, param) {
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 30000;
  return {
          timeout: timeout
        };
}

var FixtureOptions = {
  make: make$7
};

function make$8(matchCaseOpt, logOpt, timeoutOpt, includeShadowDomOpt, param) {
  var matchCase = matchCaseOpt !== undefined ? matchCaseOpt : true;
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var includeShadowDom = includeShadowDomOpt !== undefined ? includeShadowDomOpt : false;
  return {
          matchCase: matchCase,
          log: log,
          timeout: timeout,
          includeShadowDom: includeShadowDom
        };
}

var ContainsOptions = {
  make: make$8
};

function make$9(logOpt, envOpt, failOnNonZeroExitOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var env = envOpt !== undefined ? Caml_option.valFromOption(envOpt) : ({});
  var failOnNonZeroExit = failOnNonZeroExitOpt !== undefined ? failOnNonZeroExitOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 60000;
  return {
          log: log,
          env: env,
          failOnNonZeroExit: failOnNonZeroExit,
          timeout: timeout
        };
}

var ExecOptions = {
  make: make$9
};

function make$10(logOpt, timeoutOpt, includeShadowDomOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var includeShadowDom = includeShadowDomOpt !== undefined ? includeShadowDomOpt : false;
  return {
          log: log,
          timeout: timeout,
          includeShadowDom: includeShadowDom
        };
}

var FindOptions = {
  make: make$10
};

function make$11(logOpt, timeoutOpt, withinSubjectOpt, includeShadowDomOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var withinSubject = withinSubjectOpt !== undefined ? Caml_option.valFromOption(withinSubjectOpt) : null;
  var includeShadowDom = includeShadowDomOpt !== undefined ? includeShadowDomOpt : false;
  return {
          log: log,
          timeout: timeout,
          withinSubject: withinSubject,
          includeShadowDom: includeShadowDom
        };
}

var GetOptions = {
  make: make$11
};

var JQuery = {};

function toValue$2(value) {
  if (value === "post") {
    return "POST";
  } else if (value === "options") {
    return "OPTIONS";
  } else if (value === "delete") {
    return "DELETE";
  } else if (value === "get") {
    return "GET";
  } else if (value === "put") {
    return "PUT";
  } else if (value === "connect") {
    return "CONNECT";
  } else if (value === "trace") {
    return "TRACE";
  } else if (value === "patch") {
    return "PATCH";
  } else {
    return "HEAD";
  }
}

var HTTPRequest = {
  toValue: toValue$2
};

function make$12(altKeyOpt, animationDistanceThresholdOpt, ctrlKeyOpt, logOpt, forceOpt, metaKeyOpt, multipleOpt, scrollBehaviorOpt, shiftKeyOpt, timeoutOpt, waitForAnimationsOpt, param) {
  var altKey = altKeyOpt !== undefined ? altKeyOpt : false;
  var animationDistanceThreshold = animationDistanceThresholdOpt !== undefined ? animationDistanceThresholdOpt : 5;
  var ctrlKey = ctrlKeyOpt !== undefined ? ctrlKeyOpt : false;
  var log = logOpt !== undefined ? logOpt : true;
  var force = forceOpt !== undefined ? forceOpt : false;
  var metaKey = metaKeyOpt !== undefined ? metaKeyOpt : false;
  var multiple = multipleOpt !== undefined ? multipleOpt : false;
  var scrollBehavior = scrollBehaviorOpt !== undefined ? scrollBehaviorOpt : "top";
  var shiftKey = shiftKeyOpt !== undefined ? shiftKeyOpt : false;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var waitForAnimations = waitForAnimationsOpt !== undefined ? waitForAnimationsOpt : true;
  return {
          altKey: altKey,
          animationDistanceThreshold: animationDistanceThreshold,
          ctrlKey: ctrlKey,
          log: log,
          force: force,
          metaKey: metaKey,
          multiple: multiple,
          scrollBehavior: toValue$1(scrollBehavior),
          shiftKey: shiftKey,
          timeout: timeout,
          waitForAnimations: waitForAnimations
        };
}

var ClickOptions = {
  make: make$12
};

function toValue$3(value) {
  if (value === "no_restriction") {
    return "no_restriction";
  } else if (value === "strict") {
    return "strict";
  } else if (value === "undefined") {
    return ;
  } else {
    return "lax";
  }
}

var SameSite = {
  toValue: toValue$3
};

function make$13(logOpt, domainOpt, expiryOpt, httpOnlyOpt, pathOpt, secureOpt, timeoutOpt, sameSiteOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var domain = domainOpt !== undefined ? domainOpt : window.location.hostname;
  var expiry = expiryOpt !== undefined ? expiryOpt : 630720000;
  var httpOnly = httpOnlyOpt !== undefined ? httpOnlyOpt : false;
  var path = pathOpt !== undefined ? pathOpt : "/";
  var secure = secureOpt !== undefined ? secureOpt : false;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 30000;
  var sameSite = sameSiteOpt !== undefined ? sameSiteOpt : "undefined";
  return {
          log: log,
          domain: domain,
          expiry: expiry,
          httpOnly: httpOnly,
          path: path,
          secure: secure,
          timeout: timeout,
          sameSite: toValue$3(sameSite)
        };
}

var SetCookieOptions = {
  make: make$13
};

function toValue$4(val) {
  if (val === "viewport") {
    return "viewport";
  } else if (val === "runner") {
    return "runner";
  } else {
    return "fullPage";
  }
}

var Capture = {
  toValue: toValue$4
};

function createScreenshotOptionsObject(logOpt, blackoutOpt, captureOpt, clipOpt, disableTimersAndAnimationsOpt, paddingOpt, scaleOpt, timeoutOpt, onBeforeScreenshotOpt, onAfterScreenshotOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var blackout = blackoutOpt !== undefined ? blackoutOpt : [];
  var capture = captureOpt !== undefined ? captureOpt : "fullPage";
  var clip = clipOpt !== undefined ? Caml_option.valFromOption(clipOpt) : null;
  var disableTimersAndAnimations = disableTimersAndAnimationsOpt !== undefined ? disableTimersAndAnimationsOpt : true;
  var padding = paddingOpt !== undefined ? Caml_option.valFromOption(paddingOpt) : null;
  var scale = scaleOpt !== undefined ? scaleOpt : false;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 30000;
  var onBeforeScreenshot = onBeforeScreenshotOpt !== undefined ? Caml_option.valFromOption(onBeforeScreenshotOpt) : null;
  var onAfterScreenshot = onAfterScreenshotOpt !== undefined ? Caml_option.valFromOption(onAfterScreenshotOpt) : null;
  return {
          log: log,
          blackout: blackout,
          capture: toValue$4(capture),
          clip: clip,
          disableTimersAndAnimations: disableTimersAndAnimations,
          padding: padding,
          scale: scale,
          timeout: timeout,
          onBeforeScreenshot: onBeforeScreenshot,
          onAfterScreenshot: onAfterScreenshot
        };
}

var ScreenshotOptions = {
  Capture: Capture,
  createScreenshotOptionsObject: createScreenshotOptionsObject
};

function make$14(blackoutOpt, captureOpt, clipOpt, disableTimersAndAnimationsOpt, scaleOpt, screenshotOnRunFailureOpt, onBeforeScreenshotOpt, onAfterScreenshotOpt, param) {
  var blackout = blackoutOpt !== undefined ? blackoutOpt : [];
  var capture = captureOpt !== undefined ? captureOpt : "fullPage";
  var clip = clipOpt !== undefined ? Caml_option.valFromOption(clipOpt) : null;
  var disableTimersAndAnimations = disableTimersAndAnimationsOpt !== undefined ? disableTimersAndAnimationsOpt : true;
  var scale = scaleOpt !== undefined ? scaleOpt : false;
  var screenshotOnRunFailure = screenshotOnRunFailureOpt !== undefined ? screenshotOnRunFailureOpt : true;
  var onBeforeScreenshot = onBeforeScreenshotOpt !== undefined ? Caml_option.valFromOption(onBeforeScreenshotOpt) : null;
  var onAfterScreenshot = onAfterScreenshotOpt !== undefined ? Caml_option.valFromOption(onAfterScreenshotOpt) : null;
  return {
          blackout: blackout,
          capture: capture,
          clip: clip,
          disableTimersAndAnimations: disableTimersAndAnimations,
          scale: scale,
          screenshotOnRunFailure: screenshotOnRunFailure,
          onBeforeScreenshot: onBeforeScreenshot,
          onAfterScreenshot: onAfterScreenshot
        };
}

var ScreenshotDefaults = {
  make: make$14
};

var Bindings = {};

function describe$1(string, $$function) {
  return describe(string, (function () {
                return Curry._1($$function, undefined);
              }));
}

function describeOnly(string, $$function) {
  return describe.only(string, (function () {
                return Curry._1($$function, undefined);
              }));
}

function it$1(string, $$function) {
  return it(string, (function () {
                return Curry._1($$function, undefined);
              }));
}

function itOnly(string, $$function) {
  return it.only(string, (function () {
                return Curry._1($$function, undefined);
              }));
}

function context$1(string, $$function) {
  return context(string, (function () {
                return Curry._1($$function, undefined);
              }));
}

function beforeEach$1($$function) {
  return beforeEach(function () {
              return Curry._1($$function, undefined);
            });
}

function afterEach$1($$function) {
  return afterEach(function () {
              return Curry._1($$function, undefined);
            });
}

function expect$1(rule) {
  return expect(rule);
}

function expectWithDescription(rule, description) {
  return expect(rule, description);
}

function should(element, chainer, values) {
  Caml_splice_call.spliceObjApply(element, "should", [
        toValue(chainer),
        values
      ]);
  
}

function shouldP(element, chainer, values) {
  return Caml_splice_call.spliceObjApply(element, "should", [
              toValue(chainer),
              values
            ]);
}

function shouldHaveDeepMembers(element, any) {
  return should(element, "haveDeepMembers", [any]);
}

function shouldHaveDeepMembersP(element, any) {
  return shouldP(element, "haveDeepMembers", [any]);
}

function shouldHaveMembers(element, any) {
  return should(element, "haveMembers", [any]);
}

function shouldHaveMembersP(element, any) {
  return shouldP(element, "haveMembers", [any]);
}

function shouldNotHaveMembers(element, any) {
  return should(element, "haveMembers", [any]);
}

function shouldNotHaveMembersP(element, any) {
  return shouldP(element, "haveMembers", [any]);
}

function shouldHaveLength(element, $$int) {
  return should(element, "haveLength", [$$int]);
}

function shouldHaveLengthP(element, $$int) {
  return shouldP(element, "haveLength", [$$int]);
}

function shouldNotHaveLength(element, $$int) {
  return should(element, "notHaveLength", [$$int]);
}

function shouldNotHaveLengthP(element, $$int) {
  return shouldP(element, "notHaveLength", [$$int]);
}

function shouldHaveText(element, string) {
  return should(element, "haveText", [string]);
}

function shouldHaveTextP(element, string) {
  return shouldP(element, "haveText", [string]);
}

function shouldNotHaveText(element, string) {
  return should(element, "notHaveText", [string]);
}

function shouldNotHaveTextP(element, string) {
  return shouldP(element, "notHaveText", [string]);
}

function shouldHavePropertyWithValue(element, property, value) {
  return should(element, "haveProperty", [
              property,
              value
            ]);
}

function shouldHavePropertyWithValueP(element, property, value) {
  return shouldP(element, "haveProperty", [
              property,
              value
            ]);
}

function shouldNotHavePropertyWithValue(element, property, value) {
  return should(element, "notHaveProperty", [
              property,
              value
            ]);
}

function shouldNotHavePropertyWithValueP(element, property, value) {
  return shouldP(element, "notHaveProperty", [
              property,
              value
            ]);
}

function shouldHaveProperty(element, property) {
  return should(element, "haveProperty", [property]);
}

function shouldHavePropertyP(element, property) {
  return shouldP(element, "haveProperty", [property]);
}

function shouldNotHaveProperty(element, property) {
  return should(element, "notHaveProperty", [property]);
}

function shouldNotHavePropertyP(element, property) {
  return shouldP(element, "notHaveProperty", [property]);
}

function shouldHaveClass(element, string) {
  return should(element, "haveClass", [string]);
}

function shouldHaveClassP(element, string) {
  return shouldP(element, "haveClass", [string]);
}

function shouldNotHaveClass(element, string) {
  return should(element, "notHaveClass", [string]);
}

function shouldNotHaveClassP(element, string) {
  return shouldP(element, "notHaveClass", [string]);
}

function shouldHaveCss(element, property, value) {
  return should(element, "haveCss", [
              property,
              value
            ]);
}

function shouldHaveCssP(element, property, value) {
  return shouldP(element, "haveCss", [
              property,
              value
            ]);
}

function shouldNotHaveCss(element, property, value) {
  return should(element, "notHaveCss", [
              property,
              value
            ]);
}

function shouldNotHaveCssP(element, property, value) {
  return shouldP(element, "notHaveCss", [
              property,
              value
            ]);
}

function shouldHaveValue(element, string) {
  return should(element, "haveValue", [string]);
}

function shouldHaveValueP(element, string) {
  return shouldP(element, "haveValue", [string]);
}

function shouldNotHaveValue(element, string) {
  return should(element, "notHaveValue", [string]);
}

function shouldNotHaveValueP(element, string) {
  return shouldP(element, "notHaveValue", [string]);
}

function shouldHaveId(element, string) {
  return should(element, "haveId", [string]);
}

function shouldHaveIdP(element, string) {
  return shouldP(element, "haveId", [string]);
}

function shouldNotHaveId(element, string) {
  return should(element, "notHaveId", [string]);
}

function shouldNotHaveIdP(element, string) {
  return shouldP(element, "notHaveId", [string]);
}

function shouldHaveAttr(element, attr) {
  return should(element, "haveAttr", [attr]);
}

function shouldHaveAttrP(element, attr) {
  return shouldP(element, "haveAttr", [attr]);
}

function shouldHaveAttrWithValue(element, attr, value) {
  return should(element, "haveAttr", [
              attr,
              value
            ]);
}

function shouldHaveAttrWithValueP(element, attr, value) {
  return shouldP(element, "haveAttr", [
              attr,
              value
            ]);
}

function shouldNotHaveAttr(element, attr) {
  return should(element, "notHaveAttr", [attr]);
}

function shouldNotHaveAttrP(element, attr) {
  return shouldP(element, "notHaveAttr", [attr]);
}

function shouldNotHaveAttrWithValue(element, attr, value) {
  return should(element, "notHaveAttr", [
              attr,
              value
            ]);
}

function shouldNotHaveAttrWithValueP(element, attr, value) {
  return shouldP(element, "notHaveAttr", [
              attr,
              value
            ]);
}

function shouldContain(element, anyEl) {
  return should(element, "contain", [anyEl]);
}

function shouldContainP(element, anyEl) {
  return shouldP(element, "contain", [anyEl]);
}

function shouldNotContain(element, anyEl) {
  return should(element, "notContain", [anyEl]);
}

function shouldNotContainP(element, anyEl) {
  return shouldP(element, "notContain", [anyEl]);
}

function shouldExist(element) {
  return should(element, "exist", [undefined]);
}

function shouldExistP(element) {
  return shouldP(element, "exist", [undefined]);
}

function shouldNotExist(element) {
  return should(element, "notExist", [undefined]);
}

function shouldNotExistP(element) {
  return shouldP(element, "notExist", [undefined]);
}

function shouldBeHidden(element) {
  return should(element, "beHidden", [undefined]);
}

function shouldBeHiddenP(element) {
  return shouldP(element, "beHidden", [undefined]);
}

function shouldNotBeHidden(element) {
  return should(element, "notBeHidden", [undefined]);
}

function shouldNotBeHiddenP(element) {
  return shouldP(element, "notBeHidden", [undefined]);
}

function shouldBeOneOf(element, array) {
  return should(element, "beOneOf", [array]);
}

function shouldBeOneOfP(element, array) {
  return shouldP(element, "beOneOf", [array]);
}

function shouldNotBeOneOf(element, array) {
  return should(element, "notBeOneOf", [array]);
}

function shouldNotBeOneOfP(element, array) {
  return shouldP(element, "notBeOneOf", [array]);
}

function shouldBeVisible(element) {
  return should(element, "beVisible", [undefined]);
}

function shouldBeVisibleP(element) {
  return shouldP(element, "beVisible", [undefined]);
}

function shouldNotBeVisible(element) {
  return should(element, "notBeVisible", [undefined]);
}

function shouldNotBeVisibleP(element) {
  return shouldP(element, "notBeVisible", [undefined]);
}

function shouldBeChecked(element) {
  return should(element, "beChecked", [undefined]);
}

function shouldBeCheckedP(element) {
  return shouldP(element, "beChecked", [undefined]);
}

function shouldNotBeChecked(element) {
  return should(element, "notBeChecked", [undefined]);
}

function shouldNotBeCheckedP(element) {
  return shouldP(element, "notBeChecked", [undefined]);
}

function shouldBeEmpty(element) {
  return should(element, "beEmpty", [undefined]);
}

function shouldBeEmptyP(element) {
  return shouldP(element, "beEmpty", [undefined]);
}

function shouldNotBeEmpty(element) {
  return should(element, "notBeEmpty", [undefined]);
}

function shouldNotBeEmptyP(element) {
  return shouldP(element, "notBeEmpty", [undefined]);
}

function shouldBeNull(element) {
  return should(element, "beNull", [undefined]);
}

function shouldBeNullP(element) {
  return shouldP(element, "beNull", [undefined]);
}

function shouldNotBeNull(element) {
  return should(element, "notBeNull", [undefined]);
}

function shouldNotBeNullP(element) {
  return shouldP(element, "notBeNull", [undefined]);
}

function shouldDeepEqual(element, any) {
  return should(element, "deepEqual", [any]);
}

function shouldDeepEqualP(element, any) {
  return shouldP(element, "deepEqual", [any]);
}

function shouldNotDeepEqual(element, any) {
  return should(element, "notDeepEqual", [any]);
}

function shouldNotDeepEqualP(element, any) {
  return shouldP(element, "notDeepEqual", [any]);
}

function shouldInclude(element, any) {
  return should(element, "include", [any]);
}

function shouldIncludeP(element, any) {
  return shouldP(element, "include", [any]);
}

function shouldNotInclude(element, any) {
  return should(element, "notInclude", [any]);
}

function shouldNotIncludeP(element, any) {
  return shouldP(element, "notInclude", [any]);
}

function shouldDeepInclude(element, any) {
  return should(element, "deepInclude", [any]);
}

function shouldDeepIncludeP(element, any) {
  return shouldP(element, "deepInclude", [any]);
}

function shouldIncludeKeys(element, any) {
  return should(element, "includeKeys", [any]);
}

function shouldIncludeKeysP(element, any) {
  return shouldP(element, "includeKeys", [any]);
}

function shouldNotIncludeKeys(element, any) {
  return should(element, "notIncludeKeys", [any]);
}

function shouldNotIncludeKeysP(element, any) {
  return shouldP(element, "notIncludeKeys", [any]);
}

function shouldEqualString(element, string) {
  return should(element, "equal", [string]);
}

function shouldEqualStringP(element, string) {
  return shouldP(element, "equal", [string]);
}

function shouldNotEqualString(element, string) {
  return should(element, "notEqual", [string]);
}

function shouldNotEqualStringP(element, string) {
  return shouldP(element, "notEqual", [string]);
}

function shouldEqualInt(element, $$int) {
  return should(element, "equal", [$$int]);
}

function shouldEqualIntP(element, $$int) {
  return shouldP(element, "equal", [$$int]);
}

function shouldNotEqualInt(element, $$int) {
  return should(element, "notEqual", [$$int]);
}

function shouldNotEqualIntP(element, $$int) {
  return shouldP(element, "notEqual", [$$int]);
}

function shouldBeGtInt(element, $$int) {
  return should(element, "beGt", [$$int]);
}

function shouldBeGtIntP(element, $$int) {
  return shouldP(element, "beGt", [$$int]);
}

function shouldNotBeGtInt(element, $$int) {
  return should(element, "notBeGt", [$$int]);
}

function shouldNotBeGtIntP(element, $$int) {
  return shouldP(element, "notBeGt", [$$int]);
}

function shouldBeLtInt(element, $$int) {
  return should(element, "beLt", [$$int]);
}

function shouldBeLtIntP(element, $$int) {
  return shouldP(element, "beLt", [$$int]);
}

function shouldNotBeLtInt(element, $$int) {
  return should(element, "notBeLt", [$$int]);
}

function shouldNotBeLtIntP(element, $$int) {
  return shouldP(element, "notBeLt", [$$int]);
}

function shouldBeGteInt(element, $$int) {
  return should(element, "beGte", [$$int]);
}

function shouldBeGteIntP(element, $$int) {
  return shouldP(element, "beGte", [$$int]);
}

function shouldNotBeGteInt(element, $$int) {
  return should(element, "notBeGte", [$$int]);
}

function shouldNotBeGteIntP(element, $$int) {
  return shouldP(element, "notBeGte", [$$int]);
}

function shouldBeLteInt(element, $$int) {
  return should(element, "beLte", [$$int]);
}

function shouldBeLteIntP(element, $$int) {
  return shouldP(element, "beLte", [$$int]);
}

function shouldNotBeLteInt(element, $$int) {
  return should(element, "notBeLte", [$$int]);
}

function shouldNotBeLteIntP(element, $$int) {
  return shouldP(element, "notBeLte", [$$int]);
}

function shouldEqualFloat(element, $$float) {
  return should(element, "eq", [$$float]);
}

function shouldEqualFloatP(element, $$float) {
  return shouldP(element, "eq", [$$float]);
}

function shouldNotEqualFloat(element, $$float) {
  return should(element, "notEq", [$$float]);
}

function shouldNotEqualFloatP(element, $$float) {
  return shouldP(element, "notEq", [$$float]);
}

function shouldBeGtFloat(element, $$float) {
  return should(element, "beGt", [$$float]);
}

function shouldBeGtFloatP(element, $$float) {
  return shouldP(element, "beGt", [$$float]);
}

function shouldNotBeGtFloat(element, $$float) {
  return should(element, "notBeGt", [$$float]);
}

function shouldNotBeGtFloatP(element, $$float) {
  return shouldP(element, "notBeGt", [$$float]);
}

function shouldBeLtFloat(element, $$float) {
  return should(element, "beLt", [$$float]);
}

function shouldBeLtFloatP(element, $$float) {
  return shouldP(element, "beLt", [$$float]);
}

function shouldNotBeLtFloat(element, $$float) {
  return should(element, "notBeLt", [$$float]);
}

function shouldNotBeLtFloatP(element, $$float) {
  return shouldP(element, "notBeLt", [$$float]);
}

function shouldBeGteFloat(element, $$float) {
  return should(element, "beGte", [$$float]);
}

function shouldBeGteFloatP(element, $$float) {
  return shouldP(element, "beGte", [$$float]);
}

function shouldNotBeGteFloat(element, $$float) {
  return should(element, "notBeGte", [$$float]);
}

function shouldNotBeGteFloatP(element, $$float) {
  return shouldP(element, "notBeGte", [$$float]);
}

function shouldHaveHtml(element, string) {
  return should(element, "haveHtml", [string]);
}

function shouldHaveHtmlP(element, string) {
  return shouldP(element, "haveHtml", [string]);
}

function shouldNotHaveHtml(element, string) {
  return should(element, "notHaveHtml", [string]);
}

function shouldNotHaveHtmlP(element, string) {
  return shouldP(element, "notHaveHtml", [string]);
}

function shouldMatch(element, string) {
  return should(element, "match", [string]);
}

function shouldMatchP(element, string) {
  return shouldP(element, "match", [string]);
}

function shouldNotMatch(element, string) {
  return should(element, "notMatch", [string]);
}

function shouldNotMatchP(element, string) {
  return shouldP(element, "notMatch", [string]);
}

function shouldMatchRe(element, re) {
  return should(element, "match", [re]);
}

function shouldMatchReP(element, re) {
  return shouldP(element, "match", [re]);
}

function shouldNotMatchRe(element, re) {
  return should(element, "notMatch", [re]);
}

function shouldNotMatchReP(element, re) {
  return shouldP(element, "notMatch", [re]);
}

function shouldHaveBeenCalledTwice(element) {
  return should(element, "beCalledTwice", [undefined]);
}

var Sinon = {};

function toValue$5(val) {
  if (val === "head") {
    return "HEAD";
  } else if (val === "lock") {
    return "LOCK";
  } else if (val === "move") {
    return "MOVE";
  } else if (val === "post") {
    return "POST";
  } else if (val === "purge") {
    return "PURGE";
  } else if (val === "mSearch") {
    return "MSEARCH";
  } else if (val === "proppatch") {
    return "PROPPATCH";
  } else if (val === "options") {
    return "OPTIONS";
  } else if (val === "search") {
    return "SEARCH";
  } else if (val === "unlcok") {
    return "UNLOCK";
  } else if (val === "delete") {
    return "DELETE";
  } else if (val === "mkactivity") {
    return "MKACTIVITY";
  } else if (val === "get") {
    return "GET";
  } else if (val === "put") {
    return "PUT";
  } else if (val === "merge") {
    return "MERGE";
  } else if (val === "report") {
    return "REPORT";
  } else if (val === "mkcol") {
    return "MKCOL";
  } else if (val === "connect") {
    return "CONNECT";
  } else if (val === "trace") {
    return "TRACE";
  } else if (val === "subscribe") {
    return "SUBSCRIBE";
  } else if (val === "unsubscribe") {
    return "UNSUBSCRIBE";
  } else if (val === "propfind") {
    return "PROPFIND";
  } else if (val === "checkout") {
    return "CHECKOUT";
  } else if (val === "notify") {
    return "NOTIFY";
  } else if (val === "patch") {
    return "PATCH";
  } else {
    return "COPY";
  }
}

var RequestMethod = {
  toValue: toValue$5
};

function toValue$6(value) {
  if (value === "utf8") {
    return "utf8";
  } else if (value === "base64") {
    return "base64";
  } else if (value === "latin1") {
    return "latin1";
  } else if (value === "binary") {
    return "binary";
  } else if (value === "hex") {
    return "hex";
  } else if (value === "ascii") {
    return "ascii";
  } else if (value === "utf16le") {
    return "utf16le";
  } else {
    return "ucs2";
  }
}

var Encoding = {
  toValue: toValue$6
};

function createRequestOptionsObject(logOpt, urlOpt, methodOpt, authOpt, bodyOpt, failOnStatusCodeOpt, followRedirectOpt, formOpt, encodingOpt, gzipOpt, headersOpt, qsOpt, retryOnStatusCodeFailureOpt, retryOnNetworkFailureOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var url = urlOpt !== undefined ? Caml_option.valFromOption(urlOpt) : null;
  var method = methodOpt !== undefined ? methodOpt : "get";
  var auth = authOpt !== undefined ? Caml_option.valFromOption(authOpt) : null;
  var body = bodyOpt !== undefined ? Caml_option.valFromOption(bodyOpt) : null;
  var failOnStatusCode = failOnStatusCodeOpt !== undefined ? failOnStatusCodeOpt : true;
  var followRedirect = followRedirectOpt !== undefined ? followRedirectOpt : true;
  var form = formOpt !== undefined ? formOpt : false;
  var encoding = encodingOpt !== undefined ? encodingOpt : "utf8";
  var gzip = gzipOpt !== undefined ? gzipOpt : true;
  var headers = headersOpt !== undefined ? Caml_option.valFromOption(headersOpt) : null;
  var qs = qsOpt !== undefined ? Caml_option.valFromOption(qsOpt) : null;
  var retryOnStatusCodeFailure = retryOnStatusCodeFailureOpt !== undefined ? retryOnStatusCodeFailureOpt : false;
  var retryOnNetworkFailure = retryOnNetworkFailureOpt !== undefined ? retryOnNetworkFailureOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 30000;
  return {
          log: log,
          url: url,
          method: toValue$5(method),
          auth: auth,
          body: body,
          failOnStatusCode: failOnStatusCode,
          followRedirect: followRedirect,
          form: form,
          encoding: toValue$6(encoding),
          gzip: gzip,
          headers: headers,
          qs: qs,
          retryOnStatusCodeFailure: retryOnStatusCodeFailure,
          retryOnNetworkFailure: retryOnNetworkFailure,
          timeout: timeout
        };
}

function make$15(durationOpt, easingOpt, ensureScrollableOpt, logOpt, timeoutOpt, param) {
  var duration = durationOpt !== undefined ? durationOpt : 0;
  var easing = easingOpt !== undefined ? easingOpt : "swing";
  var ensureScrollable = ensureScrollableOpt !== undefined ? ensureScrollableOpt : true;
  var log = logOpt !== undefined ? logOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  return {
          duration: duration,
          easing: easing,
          ensureScrollable: ensureScrollable,
          log: log,
          timeout: timeout
        };
}

var ScrollToOptions = {
  make: make$15
};

function make$16(animationDistanceThresholdOpt, bubblesOpt, cancelableOpt, eventConstructorOpt, forceOpt, logOpt, scrollBehaviorOpt, timeoutOpt, waitForAnimationsOpt, param) {
  var animationDistanceThreshold = animationDistanceThresholdOpt !== undefined ? animationDistanceThresholdOpt : 5;
  var bubbles = bubblesOpt !== undefined ? bubblesOpt : true;
  var cancelable = cancelableOpt !== undefined ? cancelableOpt : true;
  var eventConstructor = eventConstructorOpt !== undefined ? eventConstructorOpt : "Event";
  var force = forceOpt !== undefined ? forceOpt : false;
  var log = logOpt !== undefined ? logOpt : true;
  var scrollBehavior = scrollBehaviorOpt !== undefined ? scrollBehaviorOpt : "top";
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var waitForAnimations = waitForAnimationsOpt !== undefined ? waitForAnimationsOpt : true;
  return {
          animationDistanceThreshold: animationDistanceThreshold,
          bubbles: bubbles,
          cancelable: cancelable,
          eventConstructor: eventConstructor,
          force: force,
          log: log,
          scrollBehavior: scrollBehavior,
          timeout: timeout,
          waitForAnimations: waitForAnimations
        };
}

var TriggerOptions = {
  make: make$16
};

function make$17(animationDistanceThresholdOpt, delayOpt, forceOpt, logOpt, parseSpecialCharSequencesOpt, releaseOpt, scrollBehaviorOpt, timeoutOpt, waitForAnimationsOpt, param) {
  var animationDistanceThreshold = animationDistanceThresholdOpt !== undefined ? animationDistanceThresholdOpt : 5;
  var delay = delayOpt !== undefined ? delayOpt : 10;
  var force = forceOpt !== undefined ? forceOpt : false;
  var log = logOpt !== undefined ? logOpt : true;
  var parseSpecialCharSequences = parseSpecialCharSequencesOpt !== undefined ? parseSpecialCharSequencesOpt : true;
  var release = releaseOpt !== undefined ? releaseOpt : true;
  var scrollBehavior = scrollBehaviorOpt !== undefined ? scrollBehaviorOpt : "top";
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 4000;
  var waitForAnimations = waitForAnimationsOpt !== undefined ? waitForAnimationsOpt : true;
  return {
          animationDistanceThreshold: animationDistanceThreshold,
          delay: delay,
          force: force,
          log: log,
          parseSpecialCharSequences: parseSpecialCharSequences,
          release: release,
          scrollBehavior: toValue$1(scrollBehavior),
          timeout: timeout,
          waitForAnimations: waitForAnimations
        };
}

var TypeOptions = {
  make: make$17
};

function toValue$7(value) {
  if (value === "get") {
    return "GET";
  } else {
    return "POST";
  }
}

var VisitMethod = {
  toValue: toValue$7
};

function make$18(urlOpt, methodOpt, bodyOpt, headersOpt, qsOpt, logOpt, authOpt, failOnStatusCodeOpt, onBeforeLoadOpt, onLoadOpt, retryOnStatusCodeFailureOpt, retryOnNetworkFailureOpt, timeoutOpt, param) {
  var url = urlOpt !== undefined ? Caml_option.valFromOption(urlOpt) : null;
  var method = methodOpt !== undefined ? methodOpt : "get";
  var body = bodyOpt !== undefined ? Caml_option.valFromOption(bodyOpt) : null;
  var headers = headersOpt !== undefined ? Caml_option.valFromOption(headersOpt) : ({});
  var qs = qsOpt !== undefined ? Caml_option.valFromOption(qsOpt) : ({});
  var log = logOpt !== undefined ? logOpt : true;
  var auth = authOpt !== undefined ? Caml_option.valFromOption(authOpt) : null;
  var failOnStatusCode = failOnStatusCodeOpt !== undefined ? failOnStatusCodeOpt : true;
  var onBeforeLoad = onBeforeLoadOpt !== undefined ? onBeforeLoadOpt : (function (param) {
        
      });
  var onLoad = onLoadOpt !== undefined ? onLoadOpt : (function (param) {
        
      });
  var retryOnStatusCodeFailure = retryOnStatusCodeFailureOpt !== undefined ? retryOnStatusCodeFailureOpt : false;
  var retryOnNetworkFailure = retryOnNetworkFailureOpt !== undefined ? retryOnNetworkFailureOpt : true;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 60000;
  return {
          url: url,
          method: toValue$7(method),
          body: body,
          headers: headers,
          qs: qs,
          log: log,
          auth: auth,
          failOnStatusCode: failOnStatusCode,
          onBeforeLoad: onBeforeLoad,
          onLoad: onLoad,
          retryOnStatusCodeFailure: retryOnStatusCodeFailure,
          retryOnNetworkFailure: retryOnNetworkFailure,
          timeout: timeout
        };
}

var VisitOptions = {
  VisitMethod: VisitMethod,
  make: make$18
};

function make$19(logOpt, requestTimeoutOpt, responseTimeoutOpt, timeoutOpt, param) {
  var log = logOpt !== undefined ? logOpt : true;
  var requestTimeout = requestTimeoutOpt !== undefined ? requestTimeoutOpt : 5000;
  var responseTimeout = responseTimeoutOpt !== undefined ? responseTimeoutOpt : 30000;
  var timeout = timeoutOpt !== undefined ? timeoutOpt : 5000;
  return {
          log: log,
          timeout: timeout,
          requestTimeout: requestTimeout,
          responseTimeout: responseTimeout
        };
}

var WaitOptions = {
  make: make$19
};

var WriteFileOptions = {};

function make$20(prevSubjectOpt, param) {
  var prevSubject = prevSubjectOpt !== undefined ? prevSubjectOpt : false;
  return {
          prevSubject: prevSubject
        };
}

var AddOptions = {
  make: make$20
};

var Commands = {
  AddOptions: AddOptions
};

var SelectOptions;

var CookieOptions;

var ClosestOptions;

var DocumentOptions;

var EqOptions;

var FilterOptions;

var FirstOptions;

var FocusOptions;

var HashOptions;

var InvokeOptions;

var ReloadOptions;

var ItsOptions;

var WrapOptions;

var LastOptions;

var LocationOptions;

var NextOptions;

var NotOptions;

var ParentOptions;

var ReadFileOptions;

var RootOptions;

var SiblingsOptions;

var SubmitOptions;

var TitleOptions;

var UrlOptions;

var WindowOptions;

var ClockOptions;

var DebugOptions;

var PauseOptions;

var PrevOptions;

var TickOptions;

var ViewportOptions;

var WithinOptions;

var andHaveDeepMembers = shouldHaveDeepMembers;

var andHaveDeepMembersP = shouldHaveDeepMembersP;

var andHaveMembers = shouldHaveMembers;

var andHaveMembersP = shouldHaveMembersP;

var andNotHaveMembers = shouldNotHaveMembers;

var andNotHaveMembersP = shouldNotHaveMembersP;

var andHaveLength = shouldHaveLength;

var andHaveLengthP = shouldHaveLengthP;

var andNotHaveLength = shouldNotHaveLength;

var andNotHaveLengthP = shouldNotHaveLengthP;

var andHaveText = shouldHaveText;

var andHaveTextP = shouldHaveTextP;

var andNotHaveText = shouldNotHaveText;

var andNotHaveTextP = shouldNotHaveTextP;

var andHavePropertyWithValue = shouldHavePropertyWithValue;

var andHavePropertyWithValueP = shouldHavePropertyWithValueP;

var andNotHavePropertyWithValue = shouldNotHavePropertyWithValue;

var andNotHavePropertyWithValueP = shouldNotHavePropertyWithValueP;

var andHaveProperty = shouldHaveProperty;

var andHavePropertyP = shouldHavePropertyP;

var andNotHaveProperty = shouldNotHaveProperty;

var andNotHavePropertyP = shouldNotHavePropertyP;

var andHaveClass = shouldHaveClass;

var andHaveClassP = shouldHaveClassP;

var andNotHaveClass = shouldNotHaveClass;

var andNotHaveClassP = shouldNotHaveClassP;

var andHaveCss = shouldHaveCss;

var andHaveCssP = shouldHaveCssP;

var andNotHaveCss = shouldNotHaveCss;

var andNotHaveCssP = shouldNotHaveCssP;

var andHaveValue = shouldHaveValue;

var andHaveValueP = shouldHaveValueP;

var andNotHaveValue = shouldNotHaveValue;

var andNotHaveValueP = shouldNotHaveValueP;

var andHaveId = shouldHaveId;

var andHaveIdP = shouldHaveIdP;

var andNotHaveId = shouldNotHaveId;

var andNotHaveIdP = shouldNotHaveIdP;

var andHaveAttr = shouldHaveAttr;

var andHaveAttrP = shouldHaveAttrP;

var andHaveAttrWithValue = shouldHaveAttrWithValue;

var andHaveAttrWithValueP = shouldHaveAttrWithValueP;

var andNotHaveAttr = shouldNotHaveAttr;

var andNotHaveAttrP = shouldNotHaveAttrP;

var andNotHaveAttrWithValue = shouldNotHaveAttrWithValue;

var andNotHaveAttrWithValueP = shouldNotHaveAttrWithValueP;

var andContain = shouldContain;

var andContainP = shouldContainP;

var andNotContain = shouldNotContain;

var andNotContainP = shouldNotContainP;

var andExist = shouldExist;

var andExistP = shouldExistP;

var andNotExist = shouldNotExist;

var andNotExistP = shouldNotExistP;

var andBeHidden = shouldBeHidden;

var andBeHiddenP = shouldBeHiddenP;

var andNotBeHidden = shouldNotBeHidden;

var andNotBeHiddenP = shouldNotBeHiddenP;

var andBeOneOf = shouldBeOneOf;

var andBeOneOfP = shouldBeOneOfP;

var andNotBeOneOf = shouldNotBeOneOf;

var andNotBeOneOfP = shouldNotBeOneOfP;

var andBeVisible = shouldBeVisible;

var andBeVisibleP = shouldBeVisibleP;

var andNotBeVisible = shouldNotBeVisible;

var andNotBeVisibleP = shouldNotBeVisibleP;

var andBeChecked = shouldBeChecked;

var andBeCheckedP = shouldBeCheckedP;

var andNotBeChecked = shouldNotBeChecked;

var andNotBeCheckedP = shouldNotBeCheckedP;

var andBeEmpty = shouldBeEmpty;

var andBeEmptyP = shouldBeEmptyP;

var andNotBeEmpty = shouldNotBeEmpty;

var andNotBeEmptyP = shouldNotBeEmptyP;

var andBeNull = shouldBeNull;

var andBeNullP = shouldBeNullP;

var andNotBeNull = shouldNotBeNull;

var andNotBeNullP = shouldNotBeNullP;

var andDeepEqual = shouldDeepEqual;

var andDeepEqualP = shouldDeepEqualP;

var andNotDeepEqual = shouldNotDeepEqual;

var andNotDeepEqualP = shouldNotDeepEqualP;

var andInclude = shouldInclude;

var andIncludeP = shouldIncludeP;

var andNotInclude = shouldNotInclude;

var andNotIncludeP = shouldNotIncludeP;

var andDeepInclude = shouldDeepInclude;

var andDeepIncludeP = shouldDeepIncludeP;

var andIncludeKeys = shouldIncludeKeys;

var andIncludeKeysP = shouldIncludeKeysP;

var andNotIncludeKeys = shouldNotIncludeKeys;

var andNotIncludeKeysP = shouldNotIncludeKeysP;

var andEqualString = shouldEqualString;

var andEqualStringP = shouldEqualStringP;

var andNotEqualString = shouldNotEqualString;

var andNotEqualStringP = shouldNotEqualStringP;

var andEqualInt = shouldEqualInt;

var andEqualIntP = shouldEqualIntP;

var andNotEqualInt = shouldNotEqualInt;

var andNotEqualIntP = shouldNotEqualIntP;

var andBeGtInt = shouldBeGtInt;

var andBeGtIntP = shouldBeGtIntP;

var andNotBeGtInt = shouldNotBeGtIntP;

var andNotBeGtIntP = shouldNotBeGtIntP;

var andBeLtInt = shouldBeLtInt;

var andBeLtIntP = shouldBeLtIntP;

var andNotBeLtInt = shouldNotBeLtIntP;

var andNotBeLtIntP = shouldNotBeLtIntP;

var andBeGteInt = shouldBeGteInt;

var andBeGteIntP = shouldBeGteIntP;

var andNotBeGteInt = shouldNotBeGteIntP;

var andNotBeGteIntP = shouldNotBeGteIntP;

var andBeLteInt = shouldBeLteInt;

var andBeLteIntP = shouldBeLteIntP;

var andNotBeLteInt = shouldNotBeLteIntP;

var andNotBeLteIntP = shouldNotBeLteIntP;

var andEqualFloat = shouldEqualFloat;

var andEqualFloatP = shouldEqualFloatP;

var andNotEqualFloat = shouldNotEqualFloat;

var andNotEqualFloatP = shouldNotEqualFloatP;

var andBeGtFloat = shouldBeGtFloat;

var andBeGtFloatP = shouldBeGtFloatP;

var andNotBeGtFloat = shouldNotBeGtFloatP;

var andNotBeGtFloatP = shouldNotBeGtFloatP;

var andBeLtFloat = shouldBeLtFloat;

var andBeLtFloatP = shouldBeLtFloatP;

var andNotBeLtFloat = shouldNotBeLtFloatP;

var andNotBeLtFloatP = shouldNotBeLtFloatP;

var andBeGteFloat = shouldBeGteFloat;

var andBeGteFloatP = shouldBeGteFloatP;

var andNotBeGteFloat = shouldNotBeGteFloatP;

var andNotBeGteFloatP = shouldNotBeGteFloatP;

var andHaveHtml = shouldHaveHtml;

var andHaveHtmlP = shouldHaveHtmlP;

var andNotHaveHtml = shouldNotHaveHtml;

var andNotHaveHtmlP = shouldNotHaveHtmlP;

var andMatch = shouldMatch;

var andMatchP = shouldMatchP;

var andNotMatch = shouldNotMatch;

var andNotMatchP = shouldNotMatchP;

var andMatchRe = shouldMatchRe;

var andMatchReP = shouldMatchReP;

var andNotMatchRe = shouldNotMatchRe;

var andNotMatchReP = shouldNotMatchReP;

export {
  Assertions ,
  Timeouts ,
  Acitonability ,
  ScrollBehavior ,
  BlurOptions ,
  SelectOptions ,
  CheckOptions ,
  ClearOptions ,
  ChildrenOptions ,
  CookieOptions ,
  ClosestOptions ,
  DocumentOptions ,
  EqOptions ,
  FilterOptions ,
  FirstOptions ,
  FocusOptions ,
  HashOptions ,
  InvokeOptions ,
  ReloadOptions ,
  ItsOptions ,
  WrapOptions ,
  LastOptions ,
  LocationOptions ,
  NextOptions ,
  NotOptions ,
  ParentOptions ,
  ReadFileOptions ,
  RootOptions ,
  SiblingsOptions ,
  SubmitOptions ,
  TitleOptions ,
  UrlOptions ,
  WindowOptions ,
  GoOptions ,
  TaskOptions ,
  LocalStorageOptions ,
  ClockOptions ,
  DebugOptions ,
  PauseOptions ,
  PrevOptions ,
  TickOptions ,
  ViewportOptions ,
  WithinOptions ,
  FixtureOptions ,
  ContainsOptions ,
  ExecOptions ,
  FindOptions ,
  GetOptions ,
  JQuery ,
  HTTPRequest ,
  ClickOptions ,
  SameSite ,
  SetCookieOptions ,
  ScreenshotOptions ,
  ScreenshotDefaults ,
  Bindings ,
  describe$1 as describe,
  describeOnly ,
  it$1 as it,
  itOnly ,
  context$1 as context,
  beforeEach$1 as beforeEach,
  afterEach$1 as afterEach,
  expect$1 as expect,
  expectWithDescription ,
  should ,
  shouldP ,
  shouldHaveDeepMembers ,
  shouldHaveDeepMembersP ,
  andHaveDeepMembers ,
  andHaveDeepMembersP ,
  shouldHaveMembers ,
  shouldHaveMembersP ,
  shouldNotHaveMembers ,
  shouldNotHaveMembersP ,
  andHaveMembers ,
  andHaveMembersP ,
  andNotHaveMembers ,
  andNotHaveMembersP ,
  shouldHaveLength ,
  shouldHaveLengthP ,
  shouldNotHaveLength ,
  shouldNotHaveLengthP ,
  andHaveLength ,
  andHaveLengthP ,
  andNotHaveLength ,
  andNotHaveLengthP ,
  shouldHaveText ,
  shouldHaveTextP ,
  shouldNotHaveText ,
  shouldNotHaveTextP ,
  andHaveText ,
  andHaveTextP ,
  andNotHaveText ,
  andNotHaveTextP ,
  shouldHavePropertyWithValue ,
  shouldHavePropertyWithValueP ,
  shouldNotHavePropertyWithValue ,
  shouldNotHavePropertyWithValueP ,
  andHavePropertyWithValue ,
  andHavePropertyWithValueP ,
  andNotHavePropertyWithValue ,
  andNotHavePropertyWithValueP ,
  shouldHaveProperty ,
  shouldHavePropertyP ,
  shouldNotHaveProperty ,
  shouldNotHavePropertyP ,
  andHaveProperty ,
  andHavePropertyP ,
  andNotHaveProperty ,
  andNotHavePropertyP ,
  shouldHaveClass ,
  shouldHaveClassP ,
  shouldNotHaveClass ,
  shouldNotHaveClassP ,
  andHaveClass ,
  andHaveClassP ,
  andNotHaveClass ,
  andNotHaveClassP ,
  shouldHaveCss ,
  shouldHaveCssP ,
  shouldNotHaveCss ,
  shouldNotHaveCssP ,
  andHaveCss ,
  andHaveCssP ,
  andNotHaveCss ,
  andNotHaveCssP ,
  shouldHaveValue ,
  shouldHaveValueP ,
  shouldNotHaveValue ,
  shouldNotHaveValueP ,
  andHaveValue ,
  andHaveValueP ,
  andNotHaveValue ,
  andNotHaveValueP ,
  shouldHaveId ,
  shouldHaveIdP ,
  shouldNotHaveId ,
  shouldNotHaveIdP ,
  andHaveId ,
  andHaveIdP ,
  andNotHaveId ,
  andNotHaveIdP ,
  shouldHaveAttr ,
  shouldHaveAttrP ,
  shouldHaveAttrWithValue ,
  shouldHaveAttrWithValueP ,
  shouldNotHaveAttr ,
  shouldNotHaveAttrP ,
  shouldNotHaveAttrWithValue ,
  shouldNotHaveAttrWithValueP ,
  andHaveAttr ,
  andHaveAttrP ,
  andHaveAttrWithValue ,
  andHaveAttrWithValueP ,
  andNotHaveAttr ,
  andNotHaveAttrP ,
  andNotHaveAttrWithValue ,
  andNotHaveAttrWithValueP ,
  shouldContain ,
  shouldContainP ,
  shouldNotContain ,
  shouldNotContainP ,
  andContain ,
  andContainP ,
  andNotContain ,
  andNotContainP ,
  shouldExist ,
  shouldExistP ,
  shouldNotExist ,
  shouldNotExistP ,
  andExist ,
  andExistP ,
  andNotExist ,
  andNotExistP ,
  shouldBeHidden ,
  shouldBeHiddenP ,
  shouldNotBeHidden ,
  shouldNotBeHiddenP ,
  andBeHidden ,
  andBeHiddenP ,
  andNotBeHidden ,
  andNotBeHiddenP ,
  shouldBeOneOf ,
  shouldBeOneOfP ,
  shouldNotBeOneOf ,
  shouldNotBeOneOfP ,
  andBeOneOf ,
  andBeOneOfP ,
  andNotBeOneOf ,
  andNotBeOneOfP ,
  shouldBeVisible ,
  shouldBeVisibleP ,
  shouldNotBeVisible ,
  shouldNotBeVisibleP ,
  andBeVisible ,
  andBeVisibleP ,
  andNotBeVisible ,
  andNotBeVisibleP ,
  shouldBeChecked ,
  shouldBeCheckedP ,
  shouldNotBeChecked ,
  shouldNotBeCheckedP ,
  andBeChecked ,
  andBeCheckedP ,
  andNotBeChecked ,
  andNotBeCheckedP ,
  shouldBeEmpty ,
  shouldBeEmptyP ,
  shouldNotBeEmpty ,
  shouldNotBeEmptyP ,
  andBeEmpty ,
  andBeEmptyP ,
  andNotBeEmpty ,
  andNotBeEmptyP ,
  shouldBeNull ,
  shouldBeNullP ,
  shouldNotBeNull ,
  shouldNotBeNullP ,
  andBeNull ,
  andBeNullP ,
  andNotBeNull ,
  andNotBeNullP ,
  shouldDeepEqual ,
  shouldDeepEqualP ,
  shouldNotDeepEqual ,
  shouldNotDeepEqualP ,
  andDeepEqual ,
  andDeepEqualP ,
  andNotDeepEqual ,
  andNotDeepEqualP ,
  shouldInclude ,
  shouldIncludeP ,
  shouldNotInclude ,
  shouldNotIncludeP ,
  andInclude ,
  andIncludeP ,
  andNotInclude ,
  andNotIncludeP ,
  shouldDeepInclude ,
  shouldDeepIncludeP ,
  andDeepInclude ,
  andDeepIncludeP ,
  shouldIncludeKeys ,
  shouldIncludeKeysP ,
  shouldNotIncludeKeys ,
  shouldNotIncludeKeysP ,
  andIncludeKeys ,
  andIncludeKeysP ,
  andNotIncludeKeys ,
  andNotIncludeKeysP ,
  shouldEqualString ,
  shouldEqualStringP ,
  shouldNotEqualString ,
  shouldNotEqualStringP ,
  andEqualString ,
  andEqualStringP ,
  andNotEqualString ,
  andNotEqualStringP ,
  shouldEqualInt ,
  shouldEqualIntP ,
  shouldNotEqualInt ,
  shouldNotEqualIntP ,
  andEqualInt ,
  andEqualIntP ,
  andNotEqualInt ,
  andNotEqualIntP ,
  shouldBeGtInt ,
  shouldBeGtIntP ,
  shouldNotBeGtInt ,
  shouldNotBeGtIntP ,
  andBeGtInt ,
  andBeGtIntP ,
  andNotBeGtInt ,
  andNotBeGtIntP ,
  shouldBeLtInt ,
  shouldBeLtIntP ,
  shouldNotBeLtInt ,
  shouldNotBeLtIntP ,
  andBeLtInt ,
  andBeLtIntP ,
  andNotBeLtInt ,
  andNotBeLtIntP ,
  shouldBeGteInt ,
  shouldBeGteIntP ,
  shouldNotBeGteInt ,
  shouldNotBeGteIntP ,
  andBeGteInt ,
  andBeGteIntP ,
  andNotBeGteInt ,
  andNotBeGteIntP ,
  shouldBeLteInt ,
  shouldBeLteIntP ,
  shouldNotBeLteInt ,
  shouldNotBeLteIntP ,
  andBeLteInt ,
  andBeLteIntP ,
  andNotBeLteInt ,
  andNotBeLteIntP ,
  shouldEqualFloat ,
  shouldEqualFloatP ,
  shouldNotEqualFloat ,
  shouldNotEqualFloatP ,
  andEqualFloat ,
  andEqualFloatP ,
  andNotEqualFloat ,
  andNotEqualFloatP ,
  shouldBeGtFloat ,
  shouldBeGtFloatP ,
  shouldNotBeGtFloat ,
  shouldNotBeGtFloatP ,
  andBeGtFloat ,
  andBeGtFloatP ,
  andNotBeGtFloat ,
  andNotBeGtFloatP ,
  shouldBeLtFloat ,
  shouldBeLtFloatP ,
  shouldNotBeLtFloat ,
  shouldNotBeLtFloatP ,
  andBeLtFloat ,
  andBeLtFloatP ,
  andNotBeLtFloat ,
  andNotBeLtFloatP ,
  shouldBeGteFloat ,
  shouldBeGteFloatP ,
  shouldNotBeGteFloat ,
  shouldNotBeGteFloatP ,
  andBeGteFloat ,
  andBeGteFloatP ,
  andNotBeGteFloat ,
  andNotBeGteFloatP ,
  shouldHaveHtml ,
  shouldHaveHtmlP ,
  shouldNotHaveHtml ,
  shouldNotHaveHtmlP ,
  andHaveHtml ,
  andHaveHtmlP ,
  andNotHaveHtml ,
  andNotHaveHtmlP ,
  shouldMatch ,
  shouldMatchP ,
  shouldNotMatch ,
  shouldNotMatchP ,
  andMatch ,
  andMatchP ,
  andNotMatch ,
  andNotMatchP ,
  shouldMatchRe ,
  shouldMatchReP ,
  shouldNotMatchRe ,
  shouldNotMatchReP ,
  andMatchRe ,
  andMatchReP ,
  andNotMatchRe ,
  andNotMatchReP ,
  shouldHaveBeenCalledTwice ,
  Sinon ,
  RequestMethod ,
  Encoding ,
  createRequestOptionsObject ,
  ScrollToOptions ,
  TriggerOptions ,
  TypeOptions ,
  VisitOptions ,
  WaitOptions ,
  WriteFileOptions ,
  Commands ,
  
}
/* No side effect */
