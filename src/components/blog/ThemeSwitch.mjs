// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as NextThemes from "next-themes";
import * as Tailwind$RescriptMonorepo from "../../styles/tailwind/Tailwind.mjs";

var elementStyles = Tailwind$RescriptMonorepo.twStyle([
      Tailwind$RescriptMonorepo.w(8),
      Tailwind$RescriptMonorepo.h(8),
      Tailwind$RescriptMonorepo.p(1),
      Tailwind$RescriptMonorepo.ml(1),
      Tailwind$RescriptMonorepo.mr(1),
      Tailwind$RescriptMonorepo.nmt(1),
      Tailwind$RescriptMonorepo.rounded("default"),
      Tailwind$RescriptMonorepo.sm([Tailwind$RescriptMonorepo.ml(4)])
    ]);

var svg = Tailwind$RescriptMonorepo.twStyle([
      Tailwind$RescriptMonorepo.textColor(undefined, "gray900"),
      Tailwind$RescriptMonorepo.dark([Tailwind$RescriptMonorepo.textColor(undefined, "gray100")])
    ]);

var Styles = {
  elementStyles: elementStyles,
  svg: svg
};

function ThemeSwitch(Props) {
  var classNameOpt = Props.className;
  var className = classNameOpt !== undefined ? classNameOpt : "";
  var match = React.useState(function () {
        return false;
      });
  var setMounted = match[1];
  var match$1 = NextThemes.useTheme();
  var resolvedTheme = match$1.resolvedTheme;
  var setTheme = match$1.setTheme;
  var theme = match$1.theme;
  React.useEffect((function () {
          Curry._1(setMounted, (function (param) {
                  return true;
                }));
          
        }), []);
  var onClick = function (param) {
    return Curry._1(setTheme, theme === "dark" || resolvedTheme === "dark" ? "light" : "dark");
  };
  return React.createElement("button", {
              "aria-label": "Toggle Dark Mode",
              className: Tailwind$RescriptMonorepo.merge([
                    elementStyles,
                    className
                  ]),
              type: "button",
              onClick: onClick
            }, React.createElement("svg", {
                  className: svg,
                  fill: "currentColor",
                  viewBox: "0 0 20 20",
                  xmlns: "http://www.w3.org/2000/svg"
                }, match[0] && (theme === "dark" || resolvedTheme === "dark") ? React.createElement("path", {
                        clipRule: "evenodd",
                        d: "M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z",
                        fillRule: "evenodd"
                      }) : React.createElement("path", {
                        d: "M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"
                      })));
}

var make = ThemeSwitch;

export {
  Styles ,
  make ,
  
}
/* elementStyles Not a pure module */
